"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["2226"],{8550:function(e,r,n){n.r(r),n.d(r,{default:function(){return a}});var t=n(5893),s=n(65);function c(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",blockquote:"blockquote",p:"p",ul:"ul",li:"li",code:"code",h3:"h3",pre:"pre",h4:"h4",br:"br",hr:"hr"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h1,{id:"k8s",children:["K8s",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#k8s",children:"#"})]}),"\n",(0,t.jsxs)(r.h2,{id:"一集群规划",children:["一、集群规划",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#一集群规划",children:"#"})]}),"\n",(0,t.jsxs)(r.table,{children:["\n",(0,t.jsxs)(r.thead,{children:["\n",(0,t.jsxs)(r.tr,{children:["\n",(0,t.jsx)(r.th,{children:"节点"}),"\n",(0,t.jsx)(r.th,{children:"主机名"}),"\n",(0,t.jsx)(r.th,{children:"IP"}),"\n",(0,t.jsx)(r.th,{children:"组件"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.tbody,{children:["\n",(0,t.jsxs)(r.tr,{children:["\n",(0,t.jsx)(r.td,{children:"leader节点"}),"\n",(0,t.jsx)(r.td,{children:"k8s-leader"}),"\n",(0,t.jsx)(r.td,{children:"192.168.110.200"}),"\n",(0,t.jsx)(r.td,{children:"kube-apiserver, kube-controller-manager, kube-scheduler, etcd"}),"\n"]}),"\n",(0,t.jsxs)(r.tr,{children:["\n",(0,t.jsx)(r.td,{children:"node节点"}),"\n",(0,t.jsx)(r.td,{children:"k8s-node1"}),"\n",(0,t.jsx)(r.td,{children:"192.168.110.201"}),"\n",(0,t.jsx)(r.td,{children:"kubelet, kube-proxy, docker, etcd"}),"\n"]}),"\n",(0,t.jsxs)(r.tr,{children:["\n",(0,t.jsx)(r.td,{children:"node节点"}),"\n",(0,t.jsx)(r.td,{children:"k8s-node2"}),"\n",(0,t.jsx)(r.td,{children:"192.168.110.202"}),"\n",(0,t.jsx)(r.td,{children:"kubelet, kube-proxy, docker, etcd"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"注："}),"\n",(0,t.jsx)(r.p,{children:"为了节省机器，etcd与 K8s 节点机器复用。"}),"\n",(0,t.jsx)(r.p,{children:"实验环境:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"操作系统：debian 11"}),"\n",(0,t.jsx)(r.li,{children:"配置： 2G内存/2vCPU/40G硬盘"}),"\n",(0,t.jsx)(r.li,{children:"网络：Vmware Bridge模式"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"k8s网络环境规划："}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["k8s版本：",(0,t.jsx)(r.code,{children:"v1.24.1"})]}),"\n",(0,t.jsxs)(r.li,{children:["Pod网段：",(0,t.jsx)(r.code,{children:"10.0.0.0/8"})]}),"\n",(0,t.jsxs)(r.li,{children:["Service网段：",(0,t.jsx)(r.code,{children:"172.16.0.0/12"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.h2,{id:"二初始化环境",children:["二、初始化环境",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#二初始化环境",children:"#"})]}),"\n",(0,t.jsxs)(r.h3,{id:"安装操作系统及配置静态ip",children:["安装操作系统及配置静态IP",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装操作系统及配置静态ip",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"sudo vim /etc/network/interface\r\n\r\niface ens33 inet static\r\n    address 192.168.110.xxx\r\n    netmask 255.255.255.0\r\n    gateway 192.168.110.1\r\n    dns-nameservers 8.8.8.8 114.114.114.114\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"修改必要配置",children:["修改必要配置",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#修改必要配置",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"# 关闭swap\r\n$ sudo swapoff -a  # 临时\r\n$ sudo sed -ri 's/.*swap.*/#&/' /etc/fstab    # 永久\r\n \r\n# 根据规划设置主机名\r\n$ sudo hostnamectl set-hostname k8s-xxx\r\n \r\n# 添加主机名到hosts\r\n$ cat | sudo tee -a /etc/hosts << EOF\r\n192.168.110.200 k8s-leader\r\n192.168.110.201 k8s-node1\r\n192.168.110.202 k8s-node2\r\nEOF\r\n\r\n# 将桥接的IPv4流量传递到iptables的链\r\n$ cat | sudo tee -a /etc/sysctl.d/k8s.conf << EOF\r\nnet.ipv4.ip_forward = 1\r\nnet.bridge.bridge-nf-call-ip6tables = 1\r\nnet.bridge.bridge-nf-call-iptables = 1\r\nEOF\r\n$ sudo sysctl --system  # 生效\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"三准备证书工具",children:["三、准备证书工具",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#三准备证书工具",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"cd /tmp"}),"\n",(0,t.jsxs)(r.p,{children:["wget ",(0,t.jsx)(r.a,{href:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssljson_1.6.1_linux_amd64",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssljson_1.6.1_linux_amd64"}),"\r\nwget ",(0,t.jsx)(r.a,{href:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl_1.6.1_linux_amd64",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl_1.6.1_linux_amd64"})]}),"\n",(0,t.jsx)(r.p,{children:"chmod +x cfssl*\r\nsudo mv cfssl_1.6.1_linux_amd64 /usr/local/bin/cfssl\r\nsudo mv cfssljson_1.6.1_linux_amd64 /usr/local/bin/cfssljson"}),"\n",(0,t.jsxs)(r.h2,{id:"四部署etcd-集群",children:["四、部署Etcd (集群)",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#四部署etcd-集群",children:"#"})]}),"\n",(0,t.jsxs)(r.h3,{id:"准备etcd文件",children:["准备etcd文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#准备etcd文件",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"etcd文件\r\nmkdir ~/etcd && cd ~/etcd"}),"\n",(0,t.jsxs)(r.p,{children:["ETCD_VER=v3.5.4 && wget ",(0,t.jsx)(r.a,{href:"https://github.com/etcd-io/etcd/releases/download/$%7BETCD_VER%7D/etcd-$%7BETCD_VER%7D-linux-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz"})]}),"\n",(0,t.jsx)(r.p,{children:"tar -zxf etcd-${ETCD_VER}-linux-amd64.tar.gz\r\nsudo cp etcd-${ETCD_VER}-linux-amd64/etcd* /usr/local/bin/"}),"\n",(0,t.jsxs)(r.h3,{id:"生成证书",children:["生成证书",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#生成证书",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"etcd 需要一下证书"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"/etc/kubernetes/pki/etcd/ca-key.pem\r\n/etc/kubernetes/pki/etcd/ca.pem\r\n/etc/kubernetes/pki/etcd/server-key.pem\r\n/etc/kubernetes/pki/etcd/server.pem\r\n/etc/kubernetes/pki/etcd/peer-key.pem\r\n/etc/kubernetes/pki/etcd/peer.pem\r\n/etc/kubernetes/pki/etcd/healthcheck-client-key.pem\r\n/etc/kubernetes/pki/etcd/healthcheck-client.pem\r\n\n"})}),"\n",(0,t.jsxs)(r.h4,{id:"配置ca请求文件",children:["配置ca请求文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#配置ca请求文件",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:'$ cat > ca-csr.json << EOF\r\n{\r\n"CN": "etcd CA",\r\n"key": {\r\n"algo": "rsa",\r\n"size": 2048\r\n},\r\n"names": [\r\n{\r\n"C": "CN",\r\n"TS": "Beijing",\r\n"L": "Beijing",\r\n"O": "etcd-cluster",\r\n"OU": "System"\r\n}\r\n]\r\n}\r\nEOF'}),"\n",(0,t.jsxs)(r.h4,{id:"生成ca证书",children:["生成CA证书",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#生成ca证书",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"cfssl gencert -initca ca-csr.json | cfssljson -bare ca"}),"\n",(0,t.jsxs)(r.h4,{id:"配置ca证书策略",children:["配置ca证书策略",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#配置ca证书策略",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:'cat > ca-config.json << EOF\r\n{\r\n"signing": {\r\n"default": {\r\n"expiry": "87600h"\r\n},\r\n"profiles": {\r\n"etcd": {\r\n"expiry": "87600h",\r\n"usages": [\r\n"signing",\r\n"key encipherment",\r\n"server auth",\r\n"client auth"\r\n]\r\n}\r\n}\r\n}\r\n}\r\nEOF'}),"\n",(0,t.jsxs)(r.h4,{id:"生成etcd服务端证书",children:["生成etcd服务端证书",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#生成etcd服务端证书",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:'cat > etcd-server-csr.json << EOF\r\n{\r\n"CN": "etcd-server",\r\n"hosts": [\r\n"192.168.110.200",\r\n"192.168.110.201",\r\n"192.168.110.202",\r\n"127.0.0.1"\r\n],\r\n"key": {\r\n"algo": "rsa",\r\n"size": 2048\r\n},\r\n"names": [\r\n{\r\n"C": "CN",\r\n"TS": "Beijing",\r\n"L": "Beijing",\r\n"O": "etcd-server",\r\n"OU": "System"\r\n}\r\n]\r\n}\r\nEOF'}),"\n",(0,t.jsxs)(r.p,{children:["#生成证书\r\ncfssl gencert ",(0,t.jsx)(r.br,{}),"\n","-ca=ca.pem ",(0,t.jsx)(r.br,{}),"\n","-ca-key=ca-key.pem ",(0,t.jsx)(r.br,{}),"\n","-config=ca-config.json ",(0,t.jsx)(r.br,{}),"\n","-profile=etcd ",(0,t.jsx)(r.br,{}),"\n","etcd-server-csr.json | cfssljson -bare etcd-server"]}),"\n",(0,t.jsxs)(r.h4,{id:"生成etcd客户端证书申请文件",children:["生成etcd客户端证书申请文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#生成etcd客户端证书申请文件",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'cat > etcd-client-csr.json << EOF\r\n{\r\n  "CN": "etcd-client",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "etcd-client",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n#生成证书\r\ncfssl gencert \\\r\n  -ca=ca.pem \\\r\n  -ca-key=ca-key.pem \\\r\n  -config=ca-config.json \\\r\n  -profile=etcd \\\r\n  etcd-client-csr.json | cfssljson -bare etcd-client\r\n\n'})}),"\n",(0,t.jsxs)(r.h3,{id:"配置文件以及服务",children:["配置文件以及服务",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#配置文件以及服务",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"sudo mkdir -p /etc/etcd\r\n\r\nNODE1_IP=192.168.110.200 && NODE2_IP=192.168.110.201 && NODE3_IP=192.168.110.202\r\nNODE1_NAME=etcd1 && NODE2_NAME=etcd2 && NODE3_NAME=etcd3\r\n\r\nCURRENT_NODE=${NODE2_IP} && NODE_NAME=${NODE2_NAME}  # 每个节点不同，更加节点修改。\r\n\r\n$ cat | sudo tee /etc/etcd/etcd.config.yml <<EOF\r\n# Member \r\nname: ${NODE_NAME}\r\ndata-dir: /var/lib/etcd\r\nsnapshot-count: 10000\r\nlisten-peer-urls: https://${CURRENT_NODE}:2380\r\nlisten-client-urls: https://127.0.0.1:2379,https://${CURRENT_NODE}:2379\r\n# Clustering \r\ninitial-advertise-peer-urls: https://${CURRENT_NODE}:2380\r\ninitial-cluster: ${NODE1_NAME}=https://${NODE1_IP}:2380,${NODE2_NAME}=https://${NODE2_IP}:2380,${NODE3_NAME}=https://${NODE3_IP}:2380\r\nadvertise-client-urls: https://${CURRENT_NODE}:2379\r\n# Security \r\nclient-transport-security:\r\n  cert-file: /etc/kubernetes/pki/etcd/etcd-server.pem\r\n  key-file: /etc/kubernetes/pki/etcd/etcd-server-key.pem\r\n  client-cert-auth: true\r\n  trusted-ca-file: /etc/kubernetes/pki/etcd/ca.pem\r\n  auto-tls: false\r\npeer-transport-security:\r\n  cert-file: /etc/kubernetes/pki/etcd/etcd-server.pem\r\n  key-file:  /etc/kubernetes/pki/etcd/etcd-server-key.pem\r\n  client-cert-auth: true\r\n  trusted-ca-file: /etc/kubernetes/pki/etcd/ca.pem\r\n  auto-tls: false\r\nEOF\r\n\r\n#创建service文件\r\ncat | sudo tee /etc/systemd/system/etcd.service <<EOF\r\n[Unit]\r\nDescription=Etcd Service\r\nDocumentation=https://coreos.com/etcd/docs/latest/\r\nAfter=network.target\r\n\r\n[Service]\r\nType=notify\r\nExecStart=/usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yml\r\nRestart=on-failure\r\nRestartSec=10\r\nLimitNOFILE=65536\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nAlias=etcd3.service\r\nEOF\r\n\r\nsudo mkdir -p /etc/kubernetes/pki/etcd  \r\n\r\nsudo cp -r ~/etcd/*.pem /etc/kubernetes/pki/etcd/\r\n\r\nsudo scp -r debian@k8s-leader:~/etcd/*.pem /etc/kubernetes/pki/etcd/ # 另外两个节点从leader节点拷贝\r\n\r\nsudo systemctl daemon-reload && sudo systemctl start etcd\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"五安装-docker--containerd",children:["五、安装 Docker / Containerd",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#五安装-docker--containerd",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"参考 [二进制安装docker],或者按以下步骤安装Containerd"}),"\n",(0,t.jsxs)(r.h3,{id:"安装cni插件",children:["安装cni插件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装cni插件",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["wget ",(0,t.jsx)(r.a,{href:"https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'sudo mkdir -p /etc/cni/net.d /opt/cni/bin \r\n\r\nsudo tar -xf cni-plugins-linux-amd64-v1.1.1.tgz -C /opt/cni/bin/\r\n\r\n\r\n$ cat | sudo tee /etc/cni/net.d/10-mynet.conf << EOF\r\n{\r\n	"cniVersion": "1.1.1",\r\n	"name": "mynet",\r\n	"type": "bridge",\r\n	"bridge": "cni0",\r\n	"isGateway": true,\r\n	"ipMasq": true,\r\n	"ipam": {\r\n		"type": "host-local",\r\n		"subnet": "10.0.0.0/8",\r\n		"routes": [\r\n			{ "dst": "0.0.0.0/0" }\r\n		]\r\n	}\r\n}\r\nEOF\r\n\r\n$ cat | sudo tee /etc/cni/net.d/99-loopback.conf << EOF\r\n{\r\n	"cniVersion": "1.1.1",\r\n	"name": "lo",\r\n	"type": "loopback"\r\n}\r\nEOF\r\n\n'})}),"\n",(0,t.jsxs)(r.h3,{id:"安装runc",children:["安装runc",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装runc",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/opencontainers/runc/releases/download/v1.1.0/runc.amd64",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/opencontainers/runc/releases/download/v1.1.0/runc.amd64"})}),"\n",(0,t.jsxs)(r.h3,{id:"安装containerd",children:["安装containerd",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装containerd",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/containerd/containerd/releases/download/v1.6.0/containerd-1.6.0-linux-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/containerd/containerd/releases/download/v1.6.0/containerd-1.6.0-linux-amd64.tar.gz"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'#解压\r\ntar -zxf containerd-1.6.0-linux-amd64.tar.gz  && sudo cp ./bin/* /usr/local/bin/  \r\n \r\n\r\n#创建服务启动文件\r\n\r\n#创建配置文件\r\nsudo mkdir /etc/containerd\r\ncontainerd config default | sudo tee /etc/containerd/config.toml\r\n\r\n#修改配置\r\nsed -ri \'s@(sandbox_image = ").*(")@\\1registry.aliyuncs.com/google_containers/pause:3.6\\2@ \' /etc/containerd/config.toml\r\nsed -ri \'/registry.mirrors/a\\\\n[plugins."io.containerd.grpc.v1.cri".registry.mirrors."aliyuncs"]\\nendpoint = ["https://em738s4i.mirror.aliyuncs.com"]\' /etc/containerd/config.toml \r\n\r\n#重启\r\n\r\ncat > /etc/systemd/system/containerd.service <<EOF\r\n[Unit]\r\nDescription=containerd container runtime\r\nDocumentation=https://containerd.io\r\nAfter=network.target local-fs.target\r\n\r\n[Service]\r\nExecStartPre=-/sbin/modprobe overlay\r\nExecStart=/usr/local/bin/containerd\r\nType=notify\r\nDelegate=yes\r\nKillMode=process\r\nRestart=always\r\nRestartSec=5\r\nLimitNPROC=infinity\r\nLimitCORE=infinity\r\nLimitNOFILE=1048576\r\nTasksMax=infinity\r\nOOMScoreAdjust=-999\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#启动\r\nsystemctl enable --now  containerd.service\r\n\n'})}),"\n",(0,t.jsxs)(r.h2,{id:"六部署-master",children:["六、部署 Master",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#六部署-master",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"k8s 需要以下证书"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"/etc/kubernetes/pki/ca-key.pem\r\n/etc/kubernetes/pki/ca.pem\r\n/etc/kubernetes/pki/apiserver-etcd-client-key.pem\r\n/etc/kubernetes/pki/apiserver-etcd-client.pem\r\n/etc/kubernetes/pki/apiserver-key.pem\r\n/etc/kubernetes/pki/apiserver.pem\r\n/etc/kubernetes/pki/apiserver-kubelet-client-key.pem\r\n/etc/kubernetes/pki/apiserver-kubelet-client.pem\r\n/etc/kubernetes/pki/front-proxy-ca-key.pem\r\n/etc/kubernetes/pki/front-proxy-ca.pem\r\n/etc/kubernetes/pki/front-proxy-client-key.pem\r\n/etc/kubernetes/pki/front-proxy-client.pem\r\n/etc/kubernetes/pki/sa-key.pem\r\n/etc/kubernetes/pki/sa.pub\n"})}),"\n",(0,t.jsx)(r.p,{children:"K8s二进制文件。"}),"\n",(0,t.jsxs)(r.p,{children:["wget ",(0,t.jsx)(r.a,{href:"https://dl.k8s.io/v1.24.1/kubernetes-server-linux-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://dl.k8s.io/v1.24.1/kubernetes-server-linux-amd64.tar.gz"})]}),"\n",(0,t.jsx)(r.p,{children:"tar -zxf kubernetes-server-linux-amd64.tar.gz"}),"\n",(0,t.jsx)(r.p,{children:"leader: sudo cp kubernetes/server/bin/{kube-apiserver,kube-scheduler,kube-controller-manager,kubectl} /usr/local/bin/\r\nnode: sudo cp kubernetes/server/bin/{kubelet,kube-proxy,kubectl} /usr/local/bin/"}),"\n",(0,t.jsxs)(r.h3,{id:"kube-apiserver",children:["kube-apiserver",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#kube-apiserver",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'$ mkdir k8s && cd k8s\r\n\r\n# 生成CA申请文件\r\ncat > ca-csr.json << EOF\r\n{\r\n    "CN": "kubernetes",\r\n    "key": {\r\n        "algo": "rsa",\r\n        "size": 2048\r\n    },\r\n    "names": [\r\n        {\r\n            "C": "CN",\r\n            "L": "Beijing",\r\n            "ST": "Beijing",\r\n            "O": "k8s",\r\n            "OU": "System"\r\n        }\r\n    ]\r\n}\r\nEOF\r\n\r\n# 生成ca证书\r\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca\r\n\r\n# 创建ca配置文件\r\ncat > ca-config.json <<EOF\r\n{\r\n    "signing": {\r\n         "default": {\r\n             "expiry": "87600h"\r\n        },\r\n         "profiles": {\r\n             "kubernetes": {\r\n                 "expiry": "87600h",\r\n                 "usages": [\r\n                     "signing",\r\n                     "key encipherment",\r\n                     "server auth",\r\n                     "client auth"\r\n                 ]\r\n             }\r\n         }\r\n     }\r\n}\r\nEOF\r\n\r\n\r\n# 签发 kube-apiserver HTTPS 证书\r\ncat > apiserver-csr.json << EOF\r\n{\r\n    "CN": "kubernetes",\r\n    "hosts": [\r\n      "10.0.0.1",\r\n      "127.0.0.1",\r\n      "192.168.110.200",\r\n      "192.168.110.201",\r\n      "192.168.110.202",\r\n      "192.168.110.203",\r\n      "192.168.110.204",\r\n      "kubernetes",\r\n      "kubernetes.default",\r\n      "kubernetes.default.svc",\r\n      "kubernetes.default.svc.cluster",\r\n      "kubernetes.default.svc.cluster.local"\r\n    ],\r\n    "key": {\r\n        "algo": "rsa",\r\n        "size": 2048\r\n    },\r\n    "names": [\r\n        {\r\n            "C": "CN",\r\n            "L": "BeiJing",\r\n            "ST": "BeiJing",\r\n            "O": "apiserver",\r\n            "OU": "System"\r\n        }\r\n    ]\r\n}\r\nEOF\r\n# 生成证书\r\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes apiserver-csr.json | cfssljson -bare apiserver\r\n \r\n生成apiserver-etcd-client证书\r\n\r\ncat > apiserver-etcd-client-csr.json << EOF\r\n{\r\n  "CN": "apiserver-etcd-client",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "apiserver-etcd-client",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n\r\ncfssl gencert \\\r\n-ca=../etcd/ca.pem \\\r\n-ca-key=../etcd/ca-key.pem  \\\r\n-config=../etcd/ca-config.json   \\\r\n-profile=etcd apiserver-etcd-client-csr.json | cfssljson -bare apiserver-etcd-client\r\n\r\n\r\n创建proxy-client证书以及ca\r\n\r\n生成ca配置文件\r\ncat > front-proxy-ca-csr.json <<EOF\r\n{\r\n  "CN": "kubernetes",\r\n  "key": {\r\n     "algo": "rsa",\r\n     "size": 2048\r\n  }\r\n}\r\nEOF\r\n#生成ca文件\r\ncfssl gencert -initca front-proxy-ca-csr.json | cfssljson -bare front-proxy-ca\r\n#生成客户端证书申请文件\r\ncat > front-proxy-client-csr.json <<EOF\r\n{\r\n  "CN": "front-proxy-client",\r\n  "key": {\r\n     "algo": "rsa",\r\n     "size": 2048\r\n  }\r\n}\r\nEOF\r\n#生成证书\r\ncfssl gencert \\\r\n-ca=front-proxy-ca.pem \\\r\n-ca-key=front-proxy-ca-key.pem  \\\r\n-config=ca-config.json   \\\r\n-profile=kubernetes front-proxy-client-csr.json | cfssljson -bare front-proxy-client\r\n\r\n\r\n生成apiserver-kubelet-client证书\r\n \r\ncat > apiserver-kubelet-client-csr.json << EOF\r\n{\r\n  "CN": "apiserver-kubelet-client",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "apiserver-kubelet-client",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n\r\ncfssl gencert \\\r\n-ca=ca.pem \\\r\n-ca-key=ca-key.pem  \\\r\n-config=ca-config.json   \\\r\n-profile=kubernetes apiserver-kubelet-client-csr.json | cfssljson -bare apiserver-kubelet-client\r\n\n'})}),"\n",(0,t.jsx)(r.p,{children:"sudo cp *.pem /etc/kubernetes/pki/"}),"\n",(0,t.jsxs)(r.h1,{id:"配置参数",children:["配置参数",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#配置参数",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"sudo mkdir -p /etc/kubernetes/cfg/"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'cat | sudo tee /etc/kubernetes/cfg/kube-apiserver.conf << EOF\r\nKUBE_APISERVER_OPTS="--advertise-address=192.168.110.200\r\n--allow-privileged=true\r\n--authorization-mode=Node,RBAC\r\n--client-ca-file=/etc/kubernetes/pki/ca.pem\r\n--enable-admission-plugins=NodeRestriction\r\n--enable-bootstrap-token-auth=true\r\n--etcd-cafile=/etc/kubernetes/pki/etcd/ca.pem\r\n--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.pem\r\n--etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client-key.pem\r\n--etcd-servers=https://192.168.110.200:2379,https://192.168.110.201:2379,https://192.168.110.202:2379\r\n--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.pem\r\n--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client-key.pem\r\n--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,\r\n--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem\r\n--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem\r\n--requestheader-allowed-names=front-proxy-client\r\n--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem\r\n--requestheader-extra-headers-prefix=X-Remote-Extra-\r\n--requestheader-group-headers=X-Remote-Group\r\n--requestheader-username-headers=X-Remote-User\r\n--secure-port=6443\r\n--service-account-issuer=https://kubernetes.default.svc.cluster.local\r\n--service-account-key-file=/etc/kubernetes/pki/admin.pem\r\n--service-account-signing-key-file=/etc/kubernetes/pki/admin-key.pem\r\n--service-cluster-ip-range=172.16.0.0/12\r\n--tls-cert-file=/etc/kubernetes/pki/apiserver.pem\r\n--tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem"\r\nEOF\r\n\r\n#systemd的servie文件\r\ncat | sudo tee /etc/systemd/system/kube-apiserver.service << EOF\r\n[Unit]\r\nDescription=Kubernetes API Server\r\nDocumentation=https://github.com/kubernetes/kubernetes\r\n\r\n[Service]\r\nEnvironmentFile=/etc/kubernetes/cfg/kube-apiserver.conf\r\nExecStart=/usr/local/bin/kube-apiserver \\$KUBE_APISERVER_OPTS\r\nRestart=on-failure\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n$ sudo systemctl daemon-reload && sudo systemctl enable --now kube-apiserver\r\n\n'})}),"\n",(0,t.jsxs)(r.h3,{id:"kube-controller-manger",children:["kube-controller-manger",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#kube-controller-manger",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'#生成证书请求文件\r\ncat > kube-controller-manager-csr.json <<EOF\r\n{\r\n  "CN": "system:kube-controller-manager",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "system:kube-controller-manager",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n#生成证书文件\r\ncfssl gencert \\\r\n   -ca=ca.pem \\\r\n   -ca-key=ca-key.pem \\\r\n   -config=ca-config.json \\\r\n   -profile=kubernetes \\\r\n   kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\r\n#生成配置文件\r\nkubectl config set-cluster kubernetes \\\r\n    --certificate-authority=ca.pem \\\r\n    --embed-certs=true \\\r\n    --server=https://127.0.0.1:6443 \\\r\n    --kubeconfig=kube-controller-manager.kubeconfig\r\n\r\nkubectl config set-credentials system:kube-controller-manager \\\r\n    --client-certificate=kube-controller-manager.pem \\\r\n    --client-key=kube-controller-manager-key.pem \\\r\n    --embed-certs=true \\\r\n    --kubeconfig=kube-controller-manager.kubeconfig\r\n\r\nkubectl config set-context default \\\r\n    --cluster=kubernetes \\\r\n    --user=system:kube-controller-manager \\\r\n    --kubeconfig=kube-controller-manager.kubeconfig \r\n\r\n// kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig\r\n\r\nsudo cp kube-controller-manager.kubeconfig /etc/kubernetes/\r\n\r\ncat | sudo tee /etc/kubernetes/cfg/kube-controller-manager.conf << EOF\r\nKUBE_CONTROLLER_MANAGER_OPTS="--bind-address=127.0.0.1\r\n--authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.config\r\n--authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.config\r\n--client-ca-file=/etc/kubernetes/pki/ca.pem\r\n--allocate-node-cidrs=true\r\n--cluster-cidr=10.0.0.0/8\r\n--cluster-name=kubernetes\r\n--cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem\r\n--cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem\r\n--controllers=*,bootstrapsigner,tokencleaner\r\n--kubeconfig=/etc/kubernetes/kube-controller-manager.config\r\n--leader-elect=true\r\n--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem\r\n--root-ca-file=/etc/kubernetes/pki/ca.pem\r\n--service-account-private-key-file=/etc/kubernetes/pki/admin-key.pem\r\n--service-cluster-ip-range=172.16.0.0/12\r\n--use-service-account-credentials=true"\r\nEOF\r\n\r\ncat | sudo tee /etc/systemd/system/kube-controller-manager.service << EOF\r\n[Unit]\r\nDescription=Kubernetes Controller Manager\r\nDocumentation=https://github.com/kubernetes/kubernetes\r\n\r\n[Service]\r\nEnvironmentFile=/etc/kubernetes/cfg/kube-controller-manager.conf\r\nExecStart=/usr/local/bin/kube-controller-manager \\$KUBE_CONTROLLER_MANAGER_OPTS\r\nRestart=on-failure\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\n'})}),"\n",(0,t.jsx)(r.p,{children:"sudo systemctl daemon-reload && sudo systemctl enable --now kube-controller-manager"}),"\n",(0,t.jsxs)(r.h3,{id:"kube-scheduler",children:["kube-scheduler",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#kube-scheduler",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'\r\n生成kube-scheduler证书文件\r\n\r\n#生成证书申请文件\r\ncat > kube-scheduler-csr.json <<EOF\r\n{\r\n  "CN": "system:kube-scheduler",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "system:kube-scheduler",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n#生成证书\r\ncfssl gencert \\\r\n   -ca=ca.pem \\\r\n   -ca-key=ca-key.pem \\\r\n   -config=ca-config.json \\\r\n   -profile=kubernetes \\\r\n   kube-scheduler-csr.json | cfssljson -bare kube-scheduler\r\n#生成配置文件\r\nkubectl config set-cluster kubernetes \\\r\n    --certificate-authority=ca.pem \\\r\n    --embed-certs=true \\\r\n    --server=https://127.0.0.1:6443 \\\r\n    --kubeconfig=scheduler.conf\r\n\r\n  kubectl config set-credentials system:kube-scheduler \\\r\n    --client-certificate=kube-scheduler.pem \\\r\n    --client-key=kube-scheduler-key.pem \\\r\n    --embed-certs=true \\\r\n    --kubeconfig=scheduler.conf\r\n\r\n  kubectl config set-context default \\\r\n    --cluster=kubernetes \\\r\n    --user=system:kube-scheduler \\\r\n    --kubeconfig=scheduler.conf \r\n\r\n kubectl config use-context default --kubeconfig=scheduler.conf\r\n\r\n sudo cp scheduler.conf /etc/kubernetes/\r\n\r\n部署 kube-scheduler\r\n创建配置文件\r\n\r\ncat | sudo tee /etc/kubernetes/cfg/kube-scheduler.conf << EOF\r\nKUBE_SCHEDULER_OPTS="--authentication-kubeconfig=/etc/kubernetes/scheduler.conf\r\n--authorization-kubeconfig=/etc/kubernetes/scheduler.conf\r\n--bind-address=127.0.0.1\r\n--kubeconfig=/etc/kubernetes/scheduler.conf\r\n--leader-elect=true"\r\nEOF\r\n\r\n$ cat | sudo tee /etc/systemd/system/kube-scheduler.service << EOF\r\n[Unit]\r\nDescription=Kubernetes Scheduler\r\nDocumentation=https://github.com/kubernetes/kubernetes\r\n\r\n[Service]\r\nEnvironmentFile=/etc/kubernetes/cfg/kube-scheduler.conf\r\nExecStart=/usr/local/bin/kube-scheduler \\$KUBE_SCHEDULER_OPTS\r\nRestart=on-failure\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\n'})}),"\n",(0,t.jsx)(r.p,{children:"sudo systemctl daemon-reload && sudo systemctl enable --now kube-scheduler"}),"\n",(0,t.jsxs)(r.h2,{id:"部署kubectl",children:["部署kubectl",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#部署kubectl",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"生成kubernetes集群管理员证书"}),"\n",(0,t.jsx)(r.p,{children:'#生成证书申请文件\r\ncat > admin-csr.json <<EOF\r\n{\r\n"CN": "admin",\r\n"key": {\r\n"algo": "rsa",\r\n"size": 2048\r\n},\r\n"names": [\r\n{\r\n"C": "CN",\r\n"TS": "Beijing",\r\n"L": "Beijing",\r\n"O": "system:masters",\r\n"OU": "System"\r\n}\r\n]\r\n}\r\nEOF'}),"\n",(0,t.jsxs)(r.p,{children:["#生成证书\r\ncfssl gencert ",(0,t.jsx)(r.br,{}),"\n","-ca=ca.pem ",(0,t.jsx)(r.br,{}),"\n","-ca-key=ca-key.pem ",(0,t.jsx)(r.br,{}),"\n","-config=ca-config.json ",(0,t.jsx)(r.br,{}),"\n","-profile=kubernetes ",(0,t.jsx)(r.br,{}),"\n","admin-csr.json | cfssljson -bare admin"]}),"\n",(0,t.jsxs)(r.p,{children:["#生成配置文件\r\nkubectl config set-cluster kubernetes ",(0,t.jsx)(r.br,{}),"\n","--certificate-authority=ca.pem ",(0,t.jsx)(r.br,{}),"\n","--embed-certs=true ",(0,t.jsx)(r.br,{}),"\n","--server=",(0,t.jsx)(r.a,{href:"https://192.168.110.200:6443",target:"_blank",rel:"noopener noreferrer",children:"https://192.168.110.200:6443"})," ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=admin.kubeconfig"]}),"\n",(0,t.jsxs)(r.p,{children:["kubectl config set-credentials admin ",(0,t.jsx)(r.br,{}),"\n","--client-certificate=admin.pem ",(0,t.jsx)(r.br,{}),"\n","--client-key=admin-key.pem ",(0,t.jsx)(r.br,{}),"\n","--embed-certs=true ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=admin.kubeconfig"]}),"\n",(0,t.jsxs)(r.p,{children:["kubectl config set-context default ",(0,t.jsx)(r.br,{}),"\n","--cluster=kubernetes ",(0,t.jsx)(r.br,{}),"\n","--user=admin ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=admin.kubeconfig"]}),"\n",(0,t.jsx)(r.p,{children:"kubectl config use-context default --kubeconfig=admin.kubeconfig"}),"\n",(0,t.jsx)(r.p,{children:"cp admin.kubeconfig ~/.kube/config"}),"\n",(0,t.jsxs)(r.h2,{id:"七部署-worker-node",children:["七、部署 Worker Node",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#七部署-worker-node",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"$ mkdir k8s && scp debian@k8s-leader:~/k8s/kubernetes-server-linux-amd64.tar.gz .\r\n$ tar -zxf kubernetes-server-linux-amd64.tar.gz\r\n$ sudo cp kubernetes/server/bin/{kubelet,kubectl,kube-proxy} /usr/local/bin/"}),"\n",(0,t.jsx)(r.p,{children:"$ sudo mkdir -p /etc/kubernetes/pki\r\n$ sudo mkdir -p /var/lib/kubelet"}),"\n",(0,t.jsx)(r.p,{children:"$ mkdir ~/.kube"}),"\n",(0,t.jsx)(r.p,{children:"$ scp debian@k8s-leader:~/k8s/admin.kubeconfig ~/.kube/config\r\n$ scp debian@k8s-leader:~/k8s/ca.pem ~/k8s/\r\n$ sudo cp ca.pem /etc/kubernetes/pki/"}),"\n",(0,t.jsx)(r.p,{children:"$ sudo mkdir -p /etc/systemd/system/kubelet.service.d"}),"\n",(0,t.jsxs)(r.h3,{id:"部署kubelet",children:["部署kubelet",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#部署kubelet",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"kubelet配置文件生成\r\ncat | sudo tee /var/lib/kubelet/config.yml << EOF\r\napiVersion: kubelet.config.k8s.io/v1beta1\r\nkind: KubeletConfiguration\r\nauthentication:\r\nanonymous:\r\nenabled: false\r\nwebhook:\r\ncacheTTL: 0s\r\nenabled: true\r\nx509:\r\nclientCAFile: /etc/kubernetes/pki/ca.pem\r\nauthorization:\r\nmode: Webhook\r\nwebhook:\r\ncacheAuthorizedTTL: 0s\r\ncacheUnauthorizedTTL: 0s\r\ncgroupDriver: systemd\r\nclusterDomain: cluster.local\r\ncpuManagerReconcilePeriod: 0s\r\nevictionPressureTransitionPeriod: 0s\r\nfileCheckFrequency: 0s\r\nhealthzBindAddress: 127.0.0.1\r\nhealthzPort: 10248\r\nhttpCheckFrequency: 0s\r\nimageMinimumGCAge: 0s\r\nlogging: {}\r\nnodeStatusReportFrequency: 0s\r\nnodeStatusUpdateFrequency: 0s\r\nrotateCertificates: true\r\nruntimeRequestTimeout: 0s\r\nshutdownGracePeriod: 0s\r\nEOF"}),"\n",(0,t.jsx)(r.p,{children:"TLS Bootstrapping认证文件"}),"\n",(0,t.jsxs)(r.p,{children:["#生成随机认证key\r\na=",(0,t.jsx)(r.code,{children:"head -c 16 /dev/urandom | od -An -t x | tr -d ' ' | head -c6"}),"\r\nb=",(0,t.jsx)(r.code,{children:"head -c 16 /dev/urandom | od -An -t x | tr -d ' ' | head -c16"})]}),"\n",(0,t.jsxs)(r.h2,{id:"cat--bootstrapsecretyaml-eofapiversion-v1kind-secretmetadataname-bootstrap-token-anamespace-kube-systemtype-bootstrapkubernetesiotokenstringdatadescription-the-default-bootstrap-token-generated-by-kubelet-token-id-atoken-secret-busage-bootstrap-authentication-trueusage-bootstrap-signing-trueauth-extra-groups--systembootstrappersdefault-node-tokensystembootstrappersworkersystembootstrappersingress",children:['cat > bootstrap.secret.yaml <<EOF\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\nname: bootstrap-token-$a\r\nnamespace: kube-system\r\ntype: bootstrap.kubernetes.io/token\r\nstringData:\r\ndescription: "The default bootstrap token generated by \'kubelet \'."\r\ntoken-id: $a\r\ntoken-secret: $b\r\nusage-bootstrap-authentication: "true"\r\nusage-bootstrap-signing: "true"\r\nauth-extra-groups:  system:bootstrappers:default-node-token,system:bootstrappers:worker,system:bootstrappers:ingress',(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#cat--bootstrapsecretyaml-eofapiversion-v1kind-secretmetadataname-bootstrap-token-anamespace-kube-systemtype-bootstrapkubernetesiotokenstringdatadescription-the-default-bootstrap-token-generated-by-kubelet-token-id-atoken-secret-busage-bootstrap-authentication-trueusage-bootstrap-signing-trueauth-extra-groups--systembootstrappersdefault-node-tokensystembootstrappersworkersystembootstrappersingress",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"apiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\nname: kubelet-bootstrap\r\nroleRef:\r\napiGroup: rbac.authorization.k8s.io\r\nkind: ClusterRole\r\nname: system:node-bootstrapper\r\nsubjects:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"apiGroup: rbac.authorization.k8s.io\r\nkind: Group\r\nname: system:bootstrappers:default-node-token"}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:"apiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\nname: node-autoapprove-bootstrap\r\nroleRef:\r\napiGroup: rbac.authorization.k8s.io\r\nkind: ClusterRole\r\nname: system:certificates.k8s.io:certificatesigningrequests:nodeclient\r\nsubjects:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"apiGroup: rbac.authorization.k8s.io\r\nkind: Group\r\nname: system:bootstrappers:default-node-token"}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:"apiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\nname: node-autoapprove-certificate-rotation\r\nroleRef:\r\napiGroup: rbac.authorization.k8s.io\r\nkind: ClusterRole\r\nname: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient\r\nsubjects:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"apiGroup: rbac.authorization.k8s.io\r\nkind: Group\r\nname: system:nodes"}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:'apiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRole\r\nmetadata:\r\nannotations:\r\nrbac.authorization.kubernetes.io/autoupdate: "true"\r\nlabels:\r\nkubernetes.io/bootstrapping: rbac-defaults\r\nname: system:kube-apiserver-to-kubelet\r\nrules:'}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["apiGroups:","\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:'""\r\nresources:'}),"\n",(0,t.jsx)(r.li,{children:"nodes/proxy"}),"\n",(0,t.jsx)(r.li,{children:"nodes/stats"}),"\n",(0,t.jsx)(r.li,{children:"nodes/log"}),"\n",(0,t.jsx)(r.li,{children:"nodes/spec"}),"\n",(0,t.jsx)(r.li,{children:"nodes/metrics\r\nverbs:"}),"\n",(0,t.jsx)(r.li,{children:'"*"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:'apiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\nname: system:kube-apiserver\r\nnamespace: ""\r\nroleRef:\r\napiGroup: rbac.authorization.k8s.io\r\nkind: ClusterRole\r\nname: system:kube-apiserver-to-kubelet\r\nsubjects:'}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"apiGroup: rbac.authorization.k8s.io\r\nkind: User\r\nname: kube-apiserver\r\nEOF"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"kubectl create -f bootstrap.secret.yaml"}),"\n",(0,t.jsxs)(r.p,{children:["#生成配置文件\r\nkubectl config set-cluster kubernetes  ",(0,t.jsx)(r.br,{}),"\n","--certificate-authority=ca.pem   ",(0,t.jsx)(r.br,{}),"\n","--embed-certs=true   ",(0,t.jsx)(r.br,{}),"\n","--server=",(0,t.jsx)(r.a,{href:"https://192.168.110.200:6443",target:"_blank",rel:"noopener noreferrer",children:"https://192.168.110.200:6443"}),"   ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=bootstrap-kubelet.conf"]}),"\n",(0,t.jsxs)(r.p,{children:["kubectl config set-credentials tls-bootstrap-token-user  ",(0,t.jsx)(r.br,{}),"\n","--token=$a.$b ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=bootstrap-kubelet.conf"]}),"\n",(0,t.jsxs)(r.p,{children:["kubectl config set-context tls-bootstrap-token-user@kubernetes ",(0,t.jsx)(r.br,{}),"\n","--cluster=kubernetes   ",(0,t.jsx)(r.br,{}),"\n","--user=tls-bootstrap-token-user  ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=bootstrap-kubelet.conf"]}),"\n",(0,t.jsxs)(r.p,{children:["kubectl config use-context tls-bootstrap-token-user@kubernetes  ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=bootstrap-kubelet.conf"]}),"\n",(0,t.jsx)(r.p,{children:"sudo cp bootstrap-kubelet.conf /etc/kubernetes/"}),"\n",(0,t.jsxs)(r.p,{children:["#生成service文件\r\ncat | sudo tee /etc/systemd/system/kubelet.service <<EOF\r\n[Unit]\r\nDescription=Kubernetes Kubelet\r\nDocumentation=",(0,t.jsx)(r.a,{href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/kubernetes/kubernetes"}),"\r\nAfter=containerd.service\r\nRequires=containerd.service"]}),"\n",(0,t.jsx)(r.p,{children:"[Service]\r\nExecStart=/usr/local/bin/kubelet"}),"\n",(0,t.jsx)(r.p,{children:"Restart=always\r\nStartLimitInterval=0\r\nRestartSec=10"}),"\n",(0,t.jsx)(r.p,{children:"[Install]\r\nWantedBy=multi-user.target\r\nEOF"}),"\n",(0,t.jsx)(r.p,{children:"#生成service配置文件"}),"\n",(0,t.jsx)(r.p,{children:'sudo mkdir /etc/systemd/system/kubelet.service.d/ -p\r\ncat | sudo tee /etc/systemd/system/kubelet.service.d/10-kubelet.conf <<EOF\r\n[Service]\r\nEnvironment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.config"\r\nEnvironment="KUBELET_SYSTEM_ARGS=--hostname-override=node2"\r\nEnvironment="KUBELET_RINTIME=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock"\r\nEnvironment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yml"\r\nEnvironment="KUBELET_EXTRA_ARGS=--node-labels=node.kubernetes.io/node=\'\'"\r\nExecStart=\r\nExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_SYSTEM_ARGS $KUBELET_EXTRA_ARGS $KUBELET_RINTIME\r\nEOF'}),"\n",(0,t.jsx)(r.p,{children:"sudo systemctl daemon-reload && sudo systemctl enable --now kubelet"}),"\n",(0,t.jsxs)(r.h3,{id:"部署kubeproxy",children:["部署kubeproxy",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#部署kubeproxy",children:"#"})]}),"\n",(0,t.jsxs)(r.h1,{id:"创建证书请求文件",children:["创建证书请求文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#创建证书请求文件",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:'$ cat > kube-proxy-csr.json << EOF\r\n{\r\n"CN": "system:kube-proxy",\r\n"hosts": [],\r\n"key": {\r\n"algo": "rsa",\r\n"size": 2048\r\n},\r\n"names": [\r\n{\r\n"C": "CN",\r\n"L": "BeiJing",\r\n"ST": "BeiJing",\r\n"O": "k8s",\r\n"OU": "System"\r\n}\r\n]\r\n}\r\nEOF'}),"\n",(0,t.jsxs)(r.h1,{id:"生成证书-1",children:["生成证书",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#生成证书-1",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy"}),"\n",(0,t.jsxs)(r.p,{children:["kubectl config set-cluster kubernetes ",(0,t.jsx)(r.br,{}),"\n","--certificate-authority=/opt/kubernetes/ssl/ca.pem ",(0,t.jsx)(r.br,{}),"\n","--embed-certs=true ",(0,t.jsx)(r.br,{}),"\n","--server=",(0,t.jsx)(r.a,{href:"https://192.168.32.128:6443",target:"_blank",rel:"noopener noreferrer",children:"https://192.168.32.128:6443"})," ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=kube-proxy.kubeconfig\r\nkubectl config set-credentials kube-proxy ",(0,t.jsx)(r.br,{}),"\n","--client-certificate=./kube-proxy.pem ",(0,t.jsx)(r.br,{}),"\n","--client-key=./kube-proxy-key.pem ",(0,t.jsx)(r.br,{}),"\n","--embed-certs=true ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=kube-proxy.kubeconfig\r\nkubectl config set-context default ",(0,t.jsx)(r.br,{}),"\n","--cluster=kubernetes ",(0,t.jsx)(r.br,{}),"\n","--user=kube-proxy ",(0,t.jsx)(r.br,{}),"\n","--kubeconfig=kube-proxy.kubeconfig\r\nkubectl config use-context default --kubeconfig=kube-proxy.kubeconfig"]}),"\n",(0,t.jsxs)(r.h1,{id:"配置参数文件",children:["配置参数文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#配置参数文件",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"cat > /etc/kubernetes/cfg/kube-proxy-config.yml << EOF\r\nkind: KubeProxyConfiguration\r\napiVersion: kubeproxy.config.k8s.io/v1alpha1\r\nbindAddress: 0.0.0.0\r\nmetricsBindAddress: 0.0.0.0:10249\r\nclientConnection:\r\nkubeconfig: /etc/kubernetes/kube-proxy.kubeconfig\r\nhostnameOverride: k8s-n1\r\nclusterCIDR: 172.17.0.0/16\r\nEOF"}),"\n",(0,t.jsxs)(r.h1,{id:"创建配置文件",children:["创建配置文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#创建配置文件",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:'cat > /etc/kubernetes/cfg/kube-proxy.conf << EOF\r\nKUBE_PROXY_OPTS="--logtostderr=false\r\n--v=2\r\n--config=/etc/kubernetes/cfg/kube-proxy-config.yml"\r\nEOF'}),"\n",(0,t.jsxs)(r.h1,{id:"systemd-管理-kube-proxy",children:["systemd 管理 kube-proxy",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#systemd-管理-kube-proxy",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"cat > /usr/lib/systemd/system/kube-proxy.service << EOF\r\n[Unit]\r\nDescription=Kubernetes Proxy\r\nAfter=network.target"}),"\n",(0,t.jsx)(r.p,{children:"[Service]\r\nEnvironmentFile=/etc/kubernetes/cfg/kube-proxy.conf\r\nExecStart=/usr/local/bin/kube-proxy $KUBE_PROXY_OPTS\r\nRestart=on-failure\r\nLimitNOFILE=65536"}),"\n",(0,t.jsx)(r.p,{children:"[Install]\r\nWantedBy=multi-user.target\r\nEOF"}),"\n",(0,t.jsxs)(r.h3,{id:"部署网络组件",children:["部署网络组件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#部署网络组件",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\r\n#下载客户端工具\r\nwget https://github.com/cilium/cilium-cli/releases/download/v0.10.3/cilium-linux-amd64.tar.gz\r\n\r\n#解压\r\nsudo tar xf cilium-linux-amd64.tar.gz -C /usr/local/bin/\r\n\r\n#安装下载镜像\r\nsudo ctr image pull registry.hub.docker.com/cilium/operator-generic:v1.11.1\r\nsudo ctr image pull registry.hub.docker.com/cilium/cilium:v1.11.1\r\n\r\n#kubectl 可用\r\n\r\n#使用命令安装\r\ncilium install --agent-image=registry.hub.docker.com/cilium/cilium:v1.11.1 --operator-image=registry.hub.docker.com/cilium/operator-generic:v1.11.1 --config=cluster-pool-ipv4-cidr=172.17.0.0/16\r\n\r\n#for troubleshoot\r\nkubectl -n kube-system exec -ti cilium-jw546 -- cilium-health status\r\n\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"安装kubernets-dashboard",children:["安装kubernets-dashboard",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装kubernets-dashboard",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/kubernetes/dashboard",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/kubernetes/dashboard"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\r\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml\r\n\r\nkubectl proxy\r\n\r\nhttp://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\r\n\r\nkubectl proxy --address='0.0.0.0' --port=8002 --accept-hosts='.*'\r\n\r\napiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\n  name: admin-user\r\n  namespace: kubernetes-dashboard\r\n\r\n---\r\n\r\napiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\n  name: admin-user\r\nroleRef:\r\n  apiGroup: rbac.authorization.k8s.io\r\n  kind: ClusterRole\r\n  name: cluster-admin\r\nsubjects:\r\n\r\n- kind: ServiceAccount\r\n  name: admin-user\r\n  namespace: kubernetes-dashboard\r\n\r\nkubectl apply -f k8s-dashboard.yaml\r\n\r\n获取Bearer Token\r\nkubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\r\n\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"安装-hubble",children:["安装 Hubble",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装-hubble",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"cilium hubble enable"}),"\n",(0,t.jsxs)(r.p,{children:["安装helm\r\n",(0,t.jsx)(r.a,{href:"https://github.com/helm/helm",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/helm/helm"}),"\r\n",(0,t.jsx)(r.a,{href:"https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz"}),"\r\nunzip and move it to /usr/local/bin/"]}),"\n",(0,t.jsx)(r.p,{children:"cilium hubble enable"}),"\n",(0,t.jsx)(r.p,{children:"cilium hubble enable --ui"}),"\n",(0,t.jsxs)(r.h1,{id:"open-ui",children:["Open UI",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#open-ui",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"cilium hubble ui"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"http://192.168.32.129:12000/",target:"_blank",rel:"noopener noreferrer",children:"http://192.168.32.129:12000/"})}),"\n",(0,t.jsxs)(r.h4,{id:"validate-hubble-api-access",children:["Validate Hubble API Access",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#validate-hubble-api-access",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"cilium hubble port-forward"}),"\n",(0,t.jsx)(r.p,{children:"hubble status"}),"\n",(0,t.jsx)(r.p,{children:"hubble observe"}),"\n",(0,t.jsxs)(r.h2,{id:"八部署-coredns",children:["八、部署 CoreDNS",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#八部署-coredns",children:"#"})]}),"\n",(0,t.jsxs)(r.h2,{id:"九高可用架构扩容多-master-架构",children:["九、高可用架构（扩容多 Master 架构）",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#九高可用架构扩容多-master-架构",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://kubernetes.io/docs/setup/best-practices/certificates/",target:"_blank",rel:"noopener noreferrer",children:"https://kubernetes.io/docs/setup/best-practices/certificates/"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://cloudmessage.top/archives/2kubernetes%E5%AE%89%E8%A3%85md#%E4%BA%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE",target:"_blank",rel:"noopener noreferrer",children:"https://cloudmessage.top/archives/2kubernetes%E5%AE%89%E8%A3%85md#%E4%BA%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://www.zhangzhuo.ltd/articles/2022/01/09/1641717241819.html",target:"_blank",rel:"noopener noreferrer",children:"https://www.zhangzhuo.ltd/articles/2022/01/09/1641717241819.html"})}),"\n",(0,t.jsxs)(r.h2,{id:"windows-install-cilium",children:["Windows install cilium",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#windows-install-cilium",children:"#"})]}),"\n",(0,t.jsxs)(r.h3,{id:"install-containerd",children:["install containerd",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#install-containerd",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["　wget ",(0,t.jsx)(r.a,{href:"https://github.com/containerd/containerd/releases/download/v1.6.0/cri-containerd-cni-1.6.0-windows-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/containerd/containerd/releases/download/v1.6.0/cri-containerd-cni-1.6.0-windows-amd64.tar.gz"})]}),"\n",(0,t.jsxs)(r.h3,{id:"生成containerd配置文件",children:["生成containerd配置文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#生成containerd配置文件",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:".\\containerd.exe config default | Out-File config.toml -Encoding ascii"}),"\n",(0,t.jsxs)(r.h3,{id:"生成containerd配置文件-1",children:["生成containerd配置文件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#生成containerd配置文件-1",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'\r\n　修改root和state目录\r\n\r\n　　root = "C:\\\\Program Files\\\\containerd\\\\root"\r\n　　state = "C:\\\\Program Files\\\\containerd\\\\state"\r\n\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,s.ah)(),e.components);return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["notes%2F01-Cloud%20Computing%2FK8s%2Finstall_debian.md"]={toc:[{text:"一、集群规划",id:"一集群规划",depth:2},{text:"二、初始化环境",id:"二初始化环境",depth:2},{text:"安装操作系统及配置静态IP",id:"安装操作系统及配置静态ip",depth:3},{text:"修改必要配置",id:"修改必要配置",depth:3},{text:"三、准备证书工具",id:"三准备证书工具",depth:2},{text:"四、部署Etcd (集群)",id:"四部署etcd-集群",depth:2},{text:"准备etcd文件",id:"准备etcd文件",depth:3},{text:"生成证书",id:"生成证书",depth:3},{text:"配置ca请求文件",id:"配置ca请求文件",depth:4},{text:"生成CA证书",id:"生成ca证书",depth:4},{text:"配置ca证书策略",id:"配置ca证书策略",depth:4},{text:"生成etcd服务端证书",id:"生成etcd服务端证书",depth:4},{text:"生成etcd客户端证书申请文件",id:"生成etcd客户端证书申请文件",depth:4},{text:"配置文件以及服务",id:"配置文件以及服务",depth:3},{text:"五、安装 Docker / Containerd",id:"五安装-docker--containerd",depth:2},{text:"安装cni插件",id:"安装cni插件",depth:3},{text:"安装runc",id:"安装runc",depth:3},{text:"安装containerd",id:"安装containerd",depth:3},{text:"六、部署 Master",id:"六部署-master",depth:2},{text:"kube-apiserver",id:"kube-apiserver",depth:3},{text:"kube-controller-manger",id:"kube-controller-manger",depth:3},{text:"kube-scheduler",id:"kube-scheduler",depth:3},{text:"部署kubectl",id:"部署kubectl",depth:2},{text:"七、部署 Worker Node",id:"七部署-worker-node",depth:2},{text:"部署kubelet",id:"部署kubelet",depth:3},{text:'cat > bootstrap.secret.yaml <<EOF\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\nname: bootstrap-token-$a\r\nnamespace: kube-system\r\ntype: bootstrap.kubernetes.io/token\r\nstringData:\r\ndescription: "The default bootstrap token generated by \'kubelet \'."\r\ntoken-id: $a\r\ntoken-secret: $b\r\nusage-bootstrap-authentication: "true"\r\nusage-bootstrap-signing: "true"\r\nauth-extra-groups:  system:bootstrappers:default-node-token,system:bootstrappers:worker,system:bootstrappers:ingress',id:"cat--bootstrapsecretyaml-eofapiversion-v1kind-secretmetadataname-bootstrap-token-anamespace-kube-systemtype-bootstrapkubernetesiotokenstringdatadescription-the-default-bootstrap-token-generated-by-kubelet-token-id-atoken-secret-busage-bootstrap-authentication-trueusage-bootstrap-signing-trueauth-extra-groups--systembootstrappersdefault-node-tokensystembootstrappersworkersystembootstrappersingress",depth:2},{text:"部署kubeproxy",id:"部署kubeproxy",depth:3},{text:"部署网络组件",id:"部署网络组件",depth:3},{text:"安装kubernets-dashboard",id:"安装kubernets-dashboard",depth:3},{text:"安装 Hubble",id:"安装-hubble",depth:3},{text:"Validate Hubble API Access",id:"validate-hubble-api-access",depth:4},{text:"八、部署 CoreDNS",id:"八部署-coredns",depth:2},{text:"九、高可用架构（扩容多 Master 架构）",id:"九高可用架构扩容多-master-架构",depth:2},{text:"Windows install cilium",id:"windows-install-cilium",depth:2},{text:"install containerd",id:"install-containerd",depth:3},{text:"生成containerd配置文件",id:"生成containerd配置文件",depth:3},{text:"生成containerd配置文件",id:"生成containerd配置文件-1",depth:3}],title:"Open UI",frontmatter:{}}}}]);