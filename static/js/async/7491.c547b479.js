"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["7491"],{6578:function(n,r,e){e.r(r),e.d(r,{default:()=>l});var t=e("5893"),i=e("65");let s=e.p+"static/image/1701524419603.adf53ddd.png";function u(n){let r=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",img:"img"},(0,i.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h1,{id:"用rust写模型runner",children:["用rust写模型runner",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#用rust写模型runner",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"之前学习用的都是官网写好的模型runner，这里尝试用rust自己写一个runner，主要是为了熟悉Axera的一些API以便后期扩展。这里主要用到AxEngine，他是神经网络模型芯片侧推理计算库，能够完成模型加载到执行的全部推理任务。这次主要以获取版本为例，介绍一下如何用rust接入以及相关API，完整的runner待后期完善，本例中仅仅涉及三个API，AX_ENGINE_Init，AX_ENGINE_Deinit和AX_ENGINE_GetVersion。"}),"\n",(0,t.jsx)(r.p,{children:"模型runner主要API以及调用流程，请参考文档《51 - AX ENGINE API 使用说明.pdf》，特别是调用流程，也可以参考一些C实现的example。主要用到了libax_engine.so动态库，提供的函数不多。"}),"\n",(0,t.jsx)(r.p,{children:"主要参考代码如下："}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'extern crate libc;\r\n\r\nuse libc::c_char;\r\nuse std::ffi::CStr;\r\n\r\n// 指定动态库文件名\r\n#[link(name = "ax_engine")]\r\nextern "C" {\r\n    // 声明需要调用的函数签名\r\n    fn AX_ENGINE_Init(npu_attr: &AxEngineNpuAttrT) -> i32;\r\n    fn AX_ENGINE_Deinit() -> i32;\r\n    fn AX_ENGINE_GetVersion() -> *const c_char;\r\n}\r\n\r\n#[repr(C)]\r\npub struct AxEngineNpuAttrT {\r\n    e_hard_mode: AxEngineNpuModeT,\r\n    reserve: [u32; 8],\r\n}\r\n\r\n#[repr(u8)]  // Use u8 so it matches with C enum size\r\npub enum AxEngineNpuModeT {\r\n    AxEngineVirtualNpuDisable = 0, // virtual npu disable\r\n    AxEngineVirtualNpuStd=1,\r\n    AxEngineVirtualNpuBigLittle = 2,   \r\n    AxEngineVirtualNpuButt = 3,   \r\n}\r\n\r\nfn main() {\r\n    let init_param = AxEngineNpuAttrT {\r\n        e_hard_mode: AxEngineNpuModeT::AxEngineVirtualNpuDisable,\r\n        reserve: Default::default(),\r\n    };\r\n\r\n    // 初始化推理引擎资源\r\n    let ret = unsafe { AX_ENGINE_Init(&init_param) };\r\n    println!("init engine: {}", ret);\r\n\r\n    // 获取Engine版本号\r\n    let c_buf: *const c_char = unsafe {   AX_ENGINE_GetVersion()  };\r\n    let c_str: &CStr = unsafe {  CStr::from_ptr(c_buf) };\r\n    let ver: &str = c_str.to_str().unwrap();\r\n    println!("{}", ver);\r\n\r\n    // 释放推理引擎资源\r\n    let ret = unsafe { AX_ENGINE_Deinit() };\r\n    println!("deinit engine:{}", ret);\r\n}\r\n\n'})}),"\n",(0,t.jsx)(r.p,{children:"下面的截图是最后运行结果："}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)("img",{src:s,alt:"1701524419603"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),n.components);return r?(0,t.jsx)(r,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["notes%2F07-AI%20%26%20Machine%20Learning%2FAXera-Pi%20Pro%2Frun_model%2Frun_mode.md"]={toc:[],title:"用rust写模型runner",frontmatter:{}}}}]);