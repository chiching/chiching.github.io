"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["5237"],{8685:function(e,r,n){n.r(r),n.d(r,{default:function(){return a}});var t=n(5893),s=n(65);function c(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",blockquote:"blockquote",p:"p",h3:"h3",pre:"pre",code:"code",hr:"hr",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h1,{id:"k8s",children:["K8s",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#k8s",children:"#"})]}),"\n",(0,t.jsxs)(r.h2,{id:"一集群规划",children:["一、集群规划",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#一集群规划",children:"#"})]}),"\n",(0,t.jsxs)(r.table,{children:["\n",(0,t.jsxs)(r.thead,{children:["\n",(0,t.jsxs)(r.tr,{children:["\n",(0,t.jsx)(r.th,{children:"节点"}),"\n",(0,t.jsx)(r.th,{children:"主机名"}),"\n",(0,t.jsx)(r.th,{children:"IP"}),"\n",(0,t.jsx)(r.th,{children:"组件"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.tbody,{children:["\n",(0,t.jsxs)(r.tr,{children:["\n",(0,t.jsx)(r.td,{children:"master节点"}),"\n",(0,t.jsx)(r.td,{children:"k8s-master"}),"\n",(0,t.jsx)(r.td,{children:"192.168.32.128"}),"\n",(0,t.jsx)(r.td,{children:"kube-apiserver, kube-controller-manager, kube-scheduler, etcd"}),"\n"]}),"\n",(0,t.jsxs)(r.tr,{children:["\n",(0,t.jsx)(r.td,{children:"node节点"}),"\n",(0,t.jsx)(r.td,{children:"k8s-node1"}),"\n",(0,t.jsx)(r.td,{children:"192.168.32.129"}),"\n",(0,t.jsx)(r.td,{children:"kubelet, kube-proxy, docker, etcd"}),"\n"]}),"\n",(0,t.jsxs)(r.tr,{children:["\n",(0,t.jsx)(r.td,{children:"node节点"}),"\n",(0,t.jsx)(r.td,{children:"k8s-node2"}),"\n",(0,t.jsx)(r.td,{children:"192.168.32.130"}),"\n",(0,t.jsx)(r.td,{children:"kubelet, kube-proxy, docker, etcd"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"注："}),"\n",(0,t.jsx)(r.p,{children:"为了节省机器，etcd与 K8s 节点机器复用。"}),"\n"]}),"\n",(0,t.jsxs)(r.h2,{id:"二初始化环境",children:["二、初始化环境",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#二初始化环境",children:"#"})]}),"\n",(0,t.jsxs)(r.h3,{id:"安装操作系统及配置ip",children:["安装操作系统及配置IP",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装操作系统及配置ip",children:"#"})]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"注："}),"\n",(0,t.jsx)(r.p,{children:"安装步骤略。CentOS, Ubuntu."}),"\n"]}),"\n",(0,t.jsxs)(r.h3,{id:"修改必要配置",children:["修改必要配置",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#修改必要配置",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"CentOS"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"# 关闭防火墙\r\n$ systemctl stop firewalld\r\n$ systemctl disable firewalld\r\n\r\n# 关闭selinux\r\n$ sed -i 's/enforcing/disabled/' /etc/selinux/config  # 永久\r\n$ setenforce 0  # 临时\r\n\r\n# 时间同步\r\n$ yum install ntpdate -y\r\n$ ntpdate time.windows.com\n"})}),"\n",(0,t.jsx)(r.p,{children:"Linux"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"# 关闭swap\r\n$ swapoff -a  # 临时\r\n$ sed -ri 's/.*swap.*/#&/' /etc/fstab    # 永久\r\n \r\n# 根据规划设置主机名\r\n$ hostnamectl set-hostname xxx\r\n \r\n# 添加主机名到hosts\r\n$ cat >> /etc/hosts << EOF\r\n192.168.32.128 k8s-master\r\n192.168.32.129 k8s-node1\r\n192.168.32.130 k8s-node2\r\nEOF\r\n\r\n# 将桥接的IPv4流量传递到iptables的链\r\n$ cat > /etc/sysctl.d/k8s.conf << EOF\r\nnet.ipv4.ip_forward = 1\r\nnet.bridge.bridge-nf-call-ip6tables = 1\r\nnet.bridge.bridge-nf-call-iptables = 1\r\nEOF\r\n$ sysctl --system  # 生效\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"三准备证书",children:["三、准备证书",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#三准备证书",children:"#"})]}),"\n",(0,t.jsxs)(r.h3,{id:"准备工具",children:["准备工具",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#准备工具",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["wget ",(0,t.jsx)(r.a,{href:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl-certinfo_1.6.1_linux_amd64",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl-certinfo_1.6.1_linux_amd64"}),"\r\nwget ",(0,t.jsx)(r.a,{href:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssljson_1.6.1_linux_amd64",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssljson_1.6.1_linux_amd64"}),"\r\nwget ",(0,t.jsx)(r.a,{href:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl_1.6.1_linux_amd64",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl_1.6.1_linux_amd64"})]}),"\n",(0,t.jsx)(r.p,{children:"chmod +x cfssl*\r\nsudo mv cfssl_1.6.1_linux_amd64 /usr/local/bin/cfssl\r\nsudo mv cfssljson_1.6.1_linux_amd64 /usr/local/bin/cfssljson\r\nsudo mv cfssl-certinfo_1.6.1_linux_amd64 /usr/local/bin/cfssl-certinfo"}),"\n",(0,t.jsxs)(r.h3,{id:"生成证书",children:["生成证书",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#生成证书",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"etcd"}),"\n",(0,t.jsx)(r.p,{children:"/etc/kubernetes/pki/etcd/ca-key.pem\r\n/etc/kubernetes/pki/etcd/ca.pem\r\n/etc/kubernetes/pki/etcd/server-key.pem\r\n/etc/kubernetes/pki/etcd/server.pem\r\n/etc/kubernetes/pki/etcd/peer-key.pem\r\n/etc/kubernetes/pki/etcd/peer.pem\r\n/etc/kubernetes/pki/etcd/healthcheck-client-key.pem\r\n/etc/kubernetes/pki/etcd/healthcheck-client.pem"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'$ mkdir -p ~/pki/{etcd,k8s}\r\n$ cd ~/pki/etcd\r\n\r\n# 配置ca请求文件\r\n$ cat > ca-csr.json << EOF\r\n{\r\n    "CN": "etcd CA",\r\n    "key": {\r\n        "algo": "rsa",\r\n        "size": 2048\r\n    },\r\n    "names": [\r\n        {\r\n            "C": "CN",\r\n            "TS": "Beijing",\r\n            "L": "Beijing",\r\n            "O": "etcd-cluster",\r\n            "OU": "System"\r\n        }\r\n    ]\r\n}\r\nEOF\r\n\r\n# 生成CA证书\r\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca \r\n\r\n# 配置ca证书策略\r\n\r\ncat > ca-config.json << EOF\r\n{\r\n  "signing": {\r\n    "default": {\r\n      "expiry": "87600h"\r\n    },\r\n    "profiles": {\r\n      "etcd": {\r\n         "expiry": "87600h",\r\n         "usages": [\r\n            "signing",\r\n            "key encipherment",\r\n            "server auth",\r\n            "client auth"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\nEOF\r\n\r\n# 生成etcd服务端证书\r\ncat > etcd-server-csr.json << EOF\r\n{\r\n  "CN": "etcd-server",\r\n  "hosts": [\r\n     "192.168.32.128",\r\n     "192.168.32.129",\r\n     "192.168.32.130",\r\n     "127.0.0.1"\r\n  ],\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "etcd-server",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n\r\n#生成证书\r\ncfssl gencert \\\r\n  -ca=ca.pem \\\r\n  -ca-key=ca-key.pem \\\r\n  -config=ca-config.json \\\r\n  -profile=etcd \\\r\n  etcd-server-csr.json | cfssljson -bare etcd-server\r\n\r\n# 生成etcd客户端证书申请文件\r\ncat > etcd-client-csr.json << EOF\r\n{\r\n  "CN": "etcd-client",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "etcd-client",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n#生成证书\r\ncfssl gencert \\\r\n  -ca=ca.pem \\\r\n  -ca-key=ca-key.pem \\\r\n  -config=ca-config.json \\\r\n  -profile=etcd \\\r\n  etcd-client-csr.json | cfssljson -bare etcd-client\r\n\n'})}),"\n",(0,t.jsx)(r.p,{children:"k8s"}),"\n",(0,t.jsx)(r.p,{children:"/etc/kubernetes/pki/ca-key.pem\r\n/etc/kubernetes/pki/ca.pem\r\n/etc/kubernetes/pki/apiserver-etcd-client-key.pem\r\n/etc/kubernetes/pki/apiserver-etcd-client.pem\r\n/etc/kubernetes/pki/apiserver-key.pem\r\n/etc/kubernetes/pki/apiserver.pem\r\n/etc/kubernetes/pki/apiserver-kubelet-client-key.pem\r\n/etc/kubernetes/pki/apiserver-kubelet-client.pem\r\n/etc/kubernetes/pki/front-proxy-ca-key.pem\r\n/etc/kubernetes/pki/front-proxy-ca.pem\r\n/etc/kubernetes/pki/front-proxy-client-key.pem\r\n/etc/kubernetes/pki/front-proxy-client.pem\r\n/etc/kubernetes/pki/sa-key.pem\r\n/etc/kubernetes/pki/sa.pub"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\r\n\r\n## 四、部署Etcd (集群)\r\n\r\netcd文件\r\nwget https://github.com/etcd-io/etcd/releases/download/v3.5.2/etcd-v3.5.2-linux-amd64.tar.gz\r\n\r\n\r\n$ cat > /etc/etcd/etcd.config.yml <<EOF\r\nadvertise-client-urls=https://192.168.32.128:2379\r\ncert-file=/etc/kubernetes/pki/etcd/server.pem\r\nclient-cert-auth=true\r\ndata-dir=/var/lib/etcd\r\ninitial-advertise-peer-urls=https://192.168.32.128:2380\r\ninitial-cluster=etcd1=https://192.168.32.128:2380\r\nkey-file=/etc/kubernetes/pki/etcd/server-key.pem\r\nlisten-client-urls=https://127.0.0.1:2379,https://192.168.32.128:2379\r\nlisten-metrics-urls=http://127.0.0.1:2381\r\nlisten-peer-urls=https://192.168.32.128:2380\r\nname=etcd1\r\npeer-cert-file=/etc/kubernetes/pki/etcd/peer.pem\r\npeer-client-cert-auth=true\r\npeer-key-file=/etc/kubernetes/pki/etcd/peer-key.pem\r\npeer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\r\nsnapshot-count=10000\r\ntrusted-ca-file=/etc/kubernetes/pki/etcd/ca.pem\r\nEOF\r\n\r\n#创建service文件\r\ncat > /etc/systemd/system/etcd.service <<EOF\r\n[Unit]\r\nDescription=Etcd Service\r\nDocumentation=https://coreos.com/etcd/docs/latest/\r\nAfter=network.target\r\n\r\n[Service]\r\nType=notify\r\nExecStart=/usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yml\r\nRestart=on-failure\r\nRestartSec=10\r\nLimitNOFILE=65536\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nAlias=etcd3.service\r\nEOF\r\n\r\nsudo systemctl daemon-reload && sudo systemctl start etcd\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"五安装-docker",children:["五、安装 Docker",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#五安装-docker",children:"#"})]}),"\n",(0,t.jsxs)(r.h3,{id:"安装cni插件",children:["安装cni插件",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装cni插件",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/containernetworking/plugins/releases/download/v1.0.1/cni-plugins-linux-amd64-v1.0.1.tgz",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/containernetworking/plugins/releases/download/v1.0.1/cni-plugins-linux-amd64-v1.0.1.tgz"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"#创建cni插件所需目录\r\nsudo mkdir -p /etc/cni/net.d /opt/cni/bin \r\n#解压cni二进制包\r\nsudo tar -xf cni-plugins-linux-amd64-v1.0.1.tgz -C /opt/cni/bin/\r\n\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"安装runc",children:["安装runc",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装runc",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/opencontainers/runc/releases/download/v1.1.0/runc.amd64",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/opencontainers/runc/releases/download/v1.1.0/runc.amd64"})}),"\n",(0,t.jsxs)(r.h3,{id:"安装containerd",children:["安装containerd",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#安装containerd",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://github.com/containerd/containerd/releases/download/v1.6.0/containerd-1.6.0-linux-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/containerd/containerd/releases/download/v1.6.0/containerd-1.6.0-linux-amd64.tar.gz"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'#解压\r\ntar -zxf containerd-1.6.0-linux-amd64.tar.gz  && sudo cp ./bin/* /usr/local/bin/  \r\n \r\n\r\n#创建服务启动文件\r\n\r\n#创建配置文件\r\nsudo mkdir /etc/containerd\r\ncontainerd config default | sudo tee /etc/containerd/config.toml\r\n\r\n\r\n\r\n#修改配置\r\nsed -ri \'s@(sandbox_image = ").*(")@\\1registry.aliyuncs.com/google_containers/pause:3.6\\2@ \' /etc/containerd/config.toml\r\nsed -ri \'/registry.mirrors/a\\\\n[plugins."io.containerd.grpc.v1.cri".registry.mirrors."aliyuncs"]\\nendpoint = ["https://em738s4i.mirror.aliyuncs.com"]\' /etc/containerd/config.toml \r\n\r\n#重启\r\n\r\ncat > /etc/systemd/system/containerd.service <<EOF\r\n[Unit]\r\nDescription=containerd container runtime\r\nDocumentation=https://containerd.io\r\nAfter=network.target local-fs.target\r\n\r\n[Service]\r\nExecStartPre=-/sbin/modprobe overlay\r\nExecStart=/usr/local/bin/containerd\r\nType=notify\r\nDelegate=yes\r\nKillMode=process\r\nRestart=always\r\nRestartSec=5\r\nLimitNPROC=infinity\r\nLimitCORE=infinity\r\nLimitNOFILE=1048576\r\nTasksMax=infinity\r\nOOMScoreAdjust=-999\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#启动\r\nsystemctl enable --now  containerd.service\r\n\n'})}),"\n",(0,t.jsxs)(r.h2,{id:"六部署-master",children:["六、部署 Master",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#六部署-master",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["K8s文件\r\nwget ",(0,t.jsx)(r.a,{href:"https://dl.k8s.io/v1.23.4/kubernetes-server-linux-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://dl.k8s.io/v1.23.4/kubernetes-server-linux-amd64.tar.gz"})]}),"\n",(0,t.jsxs)(r.h3,{id:"kube-apiserver",children:["kube-apiserver",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#kube-apiserver",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'$ cd ~/pki/k8s\r\n\r\n# 生成CA申请文件\r\ncat > ca-csr.json << EOF\r\n{\r\n    "CN": "kubernetes",\r\n    "key": {\r\n        "algo": "rsa",\r\n        "size": 2048\r\n    },\r\n    "names": [\r\n        {\r\n            "C": "CN",\r\n            "L": "Beijing",\r\n            "ST": "Beijing",\r\n            "O": "k8s",\r\n            "OU": "System"\r\n        }\r\n    ]\r\n}\r\nEOF\r\n\r\n# 生成ca证书\r\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca\r\n\r\n# 创建ca配置文件\r\ncat > ca-config.json <<EOF\r\n{\r\n    "signing": {\r\n         "default": {\r\n             "expiry": "87600h"\r\n        },\r\n         "profiles": {\r\n             "kubernetes": {\r\n                 "expiry": "87600h",\r\n                 "usages": [\r\n                     "signing",\r\n                     "key encipherment",\r\n                     "server auth",\r\n                     "client auth"\r\n                 ]\r\n             }\r\n         }\r\n     }\r\n}\r\nEOF\r\n\r\n生成kubernetes集群管理员证书\r\n\r\n#生成证书申请文件\r\ncat > admin-csr.json <<EOF\r\n{\r\n  "CN": "admin",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "system:masters",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n#生成证书\r\ncfssl gencert \\\r\n   -ca=ca.pem \\\r\n   -ca-key=ca-key.pem \\\r\n   -config=ca-config.json \\\r\n   -profile=kubernetes \\\r\n   admin-csr.json | cfssljson -bare admin\r\n#生成配置文件\r\nkubectl config set-cluster kubernetes \\\r\n    --certificate-authority=ca.pem \\\r\n    --embed-certs=true \\\r\n    --server=https://192.168.32.128:6443 \\\r\n    --kubeconfig=admin.kubeconfig\r\n\r\n  kubectl config set-credentials admin \\\r\n    --client-certificate=admin.pem \\\r\n    --client-key=admin-key.pem \\\r\n    --embed-certs=true \\\r\n    --kubeconfig=admin.kubeconfig\r\n\r\n  kubectl config set-context default \\\r\n    --cluster=kubernetes \\\r\n    --user=admin \\\r\n    --kubeconfig=admin.kubeconfig\r\n\r\n  kubectl config use-context default --kubeconfig=admin.kubeconfig\r\n \r\n \r\n\r\n# 签发 kube-apiserver HTTPS 证书\r\ncat > apiserver-csr.json << EOF\r\n{\r\n    "CN": "kubernetes",\r\n    "hosts": [\r\n      "10.0.0.1",\r\n      "127.0.0.1",\r\n      "192.168.32.128",\r\n      "192.168.32.129",\r\n      "192.168.32.130",\r\n      "192.168.32.131",\r\n      "192.168.32.132",\r\n      "kubernetes",\r\n      "kubernetes.default",\r\n      "kubernetes.default.svc",\r\n      "kubernetes.default.svc.cluster",\r\n      "kubernetes.default.svc.cluster.local"\r\n    ],\r\n    "key": {\r\n        "algo": "rsa",\r\n        "size": 2048\r\n    },\r\n    "names": [\r\n        {\r\n            "C": "CN",\r\n            "L": "BeiJing",\r\n            "ST": "BeiJing",\r\n            "O": "apiserver",\r\n            "OU": "System"\r\n        }\r\n    ]\r\n}\r\nEOF\r\n# 生成证书\r\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes apiserver-csr.json | cfssljson -bare apiserver\r\n \r\n\r\n创建proxy-client证书以及ca\r\n\r\n生成ca配置文件\r\ncat > front-proxy-ca-csr.json <<EOF\r\n{\r\n  "CN": "kubernetes",\r\n  "key": {\r\n     "algo": "rsa",\r\n     "size": 2048\r\n  }\r\n}\r\nEOF\r\n#生成ca文件\r\ncfssl gencert -initca front-proxy-ca-csr.json | cfssljson -bare front-proxy-ca\r\n#生成客户端证书申请文件\r\ncat > front-proxy-client-csr.json <<EOF\r\n{\r\n  "CN": "front-proxy-client",\r\n  "key": {\r\n     "algo": "rsa",\r\n     "size": 2048\r\n  }\r\n}\r\nEOF\r\n#生成证书\r\ncfssl gencert \\\r\n-ca=front-proxy-ca.pem \\\r\n-ca-key=front-proxy-ca-key.pem  \\\r\n-config=ca-config.json   \\\r\n-profile=kubernetes front-proxy-client-csr.json | cfssljson -bare front-proxy-client\r\n \r\n\r\n生成apiserver-etcd-client证书\r\n \r\ncat > apiserver-etcd-client-csr.json << EOF\r\n{\r\n  "CN": "apiserver-etcd-client",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "apiserver-etcd-client",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n\r\ncfssl gencert \\\r\n-ca=../etcd/ca.pem \\\r\n-ca-key=../etcd/ca-key.pem  \\\r\n-config=../etcd/ca-config.json   \\\r\n-profile=etcd apiserver-etcd-client-csr.json | cfssljson -bare apiserver-etcd-client\r\n\r\n生成apiserver-kubelet-client证书\r\n \r\ncat > apiserver-kubelet-client-csr.json << EOF\r\n{\r\n  "CN": "apiserver-kubelet-client",\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "TS": "Beijing",\r\n      "L": "Beijing",\r\n      "O": "apiserver-kubelet-client",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n\r\ncfssl gencert \\\r\n-ca=ca.pem \\\r\n-ca-key=ca-key.pem  \\\r\n-config=ca-config.json   \\\r\n-profile=kubernetes apiserver-kubelet-client-csr.json | cfssljson -bare apiserver-kubelet-client\r\n\n'})}),"\n",(0,t.jsxs)(r.h1,{id:"配置参数",children:["配置参数",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#配置参数",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:['cat > /opt/kubernetes/cfg/kube-apiserver.conf << EOF\r\nKUBE_APISERVER_OPTS="--advertise-address=192.168.32.128\r\n--allow-privileged=true\r\n--authorization-mode=Node,RBAC\r\n--client-ca-file=/etc/kubernetes/pki/ca.pem\r\n--enable-admission-plugins=NodeRestriction\r\n--enable-bootstrap-token-auth=true\r\n--etcd-cafile=/etc/kubernetes/pki/etcd/ca.pem\r\n--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.pem\r\n--etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client-key.pem\r\n--etcd-servers=',(0,t.jsx)(r.a,{href:"https://192.168.32.128:2379",target:"_blank",rel:"noopener noreferrer",children:"https://192.168.32.128:2379"}),"\r\n--insecure-port=0\r\n--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.pem\r\n--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client-key.pem\r\n--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname,\r\n--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem\r\n--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem\r\n--requestheader-allowed-names=front-proxy-client\r\n--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem\r\n--requestheader-extra-headers-prefix=X-Remote-Extra-\r\n--requestheader-group-headers=X-Remote-Group\r\n--requestheader-username-headers=X-Remote-User\r\n--secure-port=6443\r\n--service-account-issuer=",(0,t.jsx)(r.a,{href:"https://kubernetes.default.svc.cluster.local",target:"_blank",rel:"noopener noreferrer",children:"https://kubernetes.default.svc.cluster.local"}),'\r\n--service-account-key-file=/etc/kubernetes/pki/admin.pem\r\n--service-account-signing-key-file=/etc/kubernetes/pki/admin-key.pem\r\n--service-cluster-ip-range=10.0.0.0/24\r\n--tls-cert-file=/etc/kubernetes/pki/apiserver.pem\r\n--tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem"\r\nEOF']}),"\n",(0,t.jsxs)(r.p,{children:["#systemd的servie文件\r\ncat > /etc/systemd/system/kube-apiserver.service << EOF\r\n[Unit]\r\nDescription=Kubernetes API Server\r\nDocumentation=",(0,t.jsx)(r.a,{href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/kubernetes/kubernetes"})]}),"\n",(0,t.jsx)(r.p,{children:"[Service]\r\nEnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf\r\nExecStart=/opt/kubernetes/bin/kube-apiserver $KUBE_APISERVER_OPTS\r\nRestart=on-failure"}),"\n",(0,t.jsx)(r.p,{children:"[Install]\r\nWantedBy=multi-user.target\r\nEOF"}),"\n",(0,t.jsx)(r.p,{children:"$ systemctl daemon-reload\r\n$ systemctl start kube-apiserver\r\n$ systemctl enable kube-apiserver"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\r\n### kube-controller-manger\r\n\n"})}),"\n",(0,t.jsxs)(r.p,{children:['#生成证书请求文件\r\ncat > kube-controller-manager-csr.json <<EOF\r\n{\r\n"CN": "system:kube-controller-manager",\r\n"key": {\r\n"algo": "rsa",\r\n"size": 2048\r\n},\r\n"names": [\r\n{\r\n"C": "CN",\r\n"TS": "Beijing",\r\n"L": "Beijing",\r\n"O": "system:kube-controller-manager",\r\n"OU": "System"\r\n}\r\n]\r\n}\r\nEOF\r\n#生成证书文件\r\ncfssl gencert\r\n-ca=ca.pem\r\n-ca-key=ca-key.pem\r\n-config=ca-config.json\r\n-profile=kubernetes\r\nkube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\r\n#生成配置文件\r\nkubectl config set-cluster kubernetes\r\n--certificate-authority=ca.pem\r\n--embed-certs=true\r\n--server=',(0,t.jsx)(r.a,{href:"https://127.0.0.1:6443",target:"_blank",rel:"noopener noreferrer",children:"https://127.0.0.1:6443"}),"\r\n--kubeconfig=kube-controller-manager.kubeconfig"]}),"\n",(0,t.jsx)(r.p,{children:"kubectl config set-credentials system:kube-controller-manager\r\n--client-certificate=kube-controller-manager.pem\r\n--client-key=kube-controller-manager-key.pem\r\n--embed-certs=true\r\n--kubeconfig=kube-controller-manager.kubeconfig"}),"\n",(0,t.jsx)(r.p,{children:"kubectl config set-context default\r\n--cluster=kubernetes\r\n--user=system:kube-controller-manager\r\n--kubeconfig=kube-controller-manager.kubeconfig"}),"\n",(0,t.jsx)(r.p,{children:"kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig"}),"\n",(0,t.jsx)(r.p,{children:'cat > /opt/kubernetes/cfg/kube-controller-manager.conf << EOF\r\nKUBE_CONTROLLER_MANAGER_OPTS="--allocate-node-cidrs=true\r\n--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf\r\n--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf\r\n--bind-address=127.0.0.1\r\n--client-ca-file=/etc/kubernetes/pki/ca.pem\r\n--cluster-cidr=172.17.0.0/16\r\n--cluster-name=kubernetes\r\n--cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem\r\n--cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem\r\n--controllers=*,bootstrapsigner,tokencleaner\r\n--kubeconfig=/etc/kubernetes/controller-manager.conf\r\n--leader-elect=true\r\n--port=0\r\n--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem\r\n--root-ca-file=/etc/kubernetes/pki/ca.pem\r\n--service-account-private-key-file=/etc/kubernetes/pki/admin-key.pem\r\n--service-cluster-ip-range=10.0.0.0/24\r\n--use-service-account-credentials=true\r\nEOF'}),"\n",(0,t.jsxs)(r.p,{children:["cat > /etc/systemd/system/kube-controller-manager.service << EOF\r\n[Unit]\r\nDescription=Kubernetes Controller Manager\r\nDocumentation=",(0,t.jsx)(r.a,{href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/kubernetes/kubernetes"})]}),"\n",(0,t.jsx)(r.p,{children:"[Service]\r\nEnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager.conf\r\nExecStart=/opt/kubernetes/bin/kube-controller-manager $KUBE_CONTROLLER_MANAGER_OPTS\r\nRestart=on-failure"}),"\n",(0,t.jsx)(r.p,{children:"[Install]\r\nWantedBy=multi-user.target\r\nEOF"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\r\n### kube-scheduler\r\n\n"})}),"\n",(0,t.jsx)(r.p,{children:"生成kube-scheduler证书文件"}),"\n",(0,t.jsxs)(r.p,{children:['#生成证书申请文件\r\ncat > kube-scheduler-csr.json <<EOF\r\n{\r\n"CN": "system:kube-scheduler",\r\n"key": {\r\n"algo": "rsa",\r\n"size": 2048\r\n},\r\n"names": [\r\n{\r\n"C": "CN",\r\n"TS": "Beijing",\r\n"L": "Beijing",\r\n"O": "system:kube-scheduler",\r\n"OU": "System"\r\n}\r\n]\r\n}\r\nEOF\r\n#生成证书\r\ncfssl gencert\r\n-ca=ca.pem\r\n-ca-key=ca-key.pem\r\n-config=ca-config.json\r\n-profile=kubernetes\r\nkube-scheduler-csr.json | cfssljson -bare kube-scheduler\r\n#生成配置文件\r\nkubectl config set-cluster kubernetes\r\n--certificate-authority=ca.pem\r\n--embed-certs=true\r\n--server=',(0,t.jsx)(r.a,{href:"https://127.0.0.1:6443",target:"_blank",rel:"noopener noreferrer",children:"https://127.0.0.1:6443"}),"\r\n--kubeconfig=scheduler.conf"]}),"\n",(0,t.jsx)(r.p,{children:"kubectl config set-credentials system:kube-scheduler\r\n--client-certificate=kube-scheduler.pem\r\n--client-key=kube-scheduler-key.pem\r\n--embed-certs=true\r\n--kubeconfig=scheduler.conf"}),"\n",(0,t.jsx)(r.p,{children:"kubectl config set-context default\r\n--cluster=kubernetes\r\n--user=system:kube-scheduler\r\n--kubeconfig=scheduler.conf"}),"\n",(0,t.jsx)(r.p,{children:"kubectl config use-context default --kubeconfig=scheduler.conf"}),"\n",(0,t.jsx)(r.p,{children:'部署 kube-scheduler\r\n创建配置文件\r\ncat > /opt/kubernetes/cfg/kube-scheduler.conf << EOF\r\nKUBE_SCHEDULER_OPTS="--authentication-kubeconfig=/etc/kubernetes/scheduler.conf\r\n--authorization-kubeconfig=/etc/kubernetes/scheduler.conf\r\n--bind-address=127.0.0.1\r\n--kubeconfig=/etc/kubernetes/scheduler.conf\r\n--leader-elect=true\r\n--port=0\r\nEOF'}),"\n",(0,t.jsxs)(r.p,{children:["$ cat > /etc/systemd/system/kube-scheduler.service << EOF\r\n[Unit]\r\nDescription=Kubernetes Scheduler\r\nDocumentation=",(0,t.jsx)(r.a,{href:"https://github.com/kubernetes/kubernetes",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/kubernetes/kubernetes"})]}),"\n",(0,t.jsx)(r.p,{children:"[Service]\r\nEnvironmentFile=/opt/kubernetes/cfg/kube-scheduler.conf\r\nExecStart=/opt/kubernetes/bin/kube-scheduler $KUBE_SCHEDULER_OPTS\r\nRestart=on-failure"}),"\n",(0,t.jsx)(r.p,{children:"[Install]\r\nWantedBy=multi-user.target\r\nEOF"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"## 部署kubectl\r\n\n"})}),"\n",(0,t.jsx)(r.p,{children:'vim admin-csr.json\r\n{\r\n"CN": "admin",\r\n"hosts": [],\r\n"key": {\r\n"algo": "rsa",\r\n"size": 2048\r\n},\r\n"names": [\r\n{\r\n"C": "CN",\r\n"ST": "Hubei",\r\n"L": "Wuhan",\r\n"O": "system:masters",\r\n"OU": "system"\r\n}\r\n]\r\n}'}),"\n",(0,t.jsx)(r.p,{children:"[root@master1 work]# cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin\r\n[root@master1 work]# cp admin*.pem /etc/kubernetes/ssl/"}),"\n",(0,t.jsxs)(r.p,{children:["设置集群参数\r\n[root@master1 work]# kubectl config set-cluster kubernetes --certificate-authority=ca.pem --embed-certs=true --server=",(0,t.jsx)(r.a,{href:"https://172.10.0.20:6443",target:"_blank",rel:"noopener noreferrer",children:"https://172.10.0.20:6443"})," --kubeconfig=kube.config\r\n设置客户端认证参数\r\n[root@master1 work]# kubectl config set-credentials admin --client-certificate=admin.pem --client-key=admin-key.pem --embed-certs=true --kubeconfig=kube.config\r\n设置上下文参数\r\n[root@master1 work]# kubectl config set-context kubernetes --cluster=kubernetes --user=admin --kubeconfig=kube.config\r\n设置默认上下文\r\n[root@master1 work]# kubectl config use-context kubernetes --kubeconfig=kube.config\r\n[root@master1 work]# mkdir ~/.kube\r\n[root@master1 work]# cp kube.config ~/.kube/config\r\n授权kubernetes证书访问kubelet api权限\r\n[root@master1 work]# kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'\r\n## 七、部署 Worker Node\r\nsudo mkdir -p /etc/kubernetes\r\nsudo mkdir -p /etc/kubernetes/pki\r\nsudo mkdir -p /var/lib/kubelet\r\nsudo mkdir -p /etc/systemd/system/kubelet.service.d\r\n\r\nsudo cp kubernetes/node/bin/* /usr/local/bin/\r\n\r\n### 部署kubelet\r\n\r\nkubelet配置文件生成\r\ncat > /var/lib/kubelet/config.yml << EOF\r\napiVersion: kubelet.config.k8s.io/v1beta1\r\nauthentication:\r\n  anonymous:\r\n    enabled: false\r\n  webhook:\r\n    cacheTTL: 0s\r\n    enabled: true\r\n  x509:\r\n    clientCAFile: /etc/kubernetes/pki/ca.pem\r\nauthorization:\r\n  mode: Webhook\r\n  webhook:\r\n    cacheAuthorizedTTL: 0s\r\n    cacheUnauthorizedTTL: 0s\r\ncgroupDriver: systemd\r\nclusterDNS:\r\n- 10.200.0.2\r\nclusterDomain: cluster.local\r\ncpuManagerReconcilePeriod: 0s\r\nevictionPressureTransitionPeriod: 0s\r\nfileCheckFrequency: 0s\r\nhealthzBindAddress: 127.0.0.1\r\nhealthzPort: 10248\r\nhttpCheckFrequency: 0s\r\nimageMinimumGCAge: 0s\r\nkind: KubeletConfiguration\r\nlogging: {}\r\nnodeStatusReportFrequency: 0s\r\nnodeStatusUpdateFrequency: 0s\r\nrotateCertificates: true\r\nruntimeRequestTimeout: 0s\r\nshutdownGracePeriod: 0s\r\nEOF\r\n\r\nTLS Bootstrapping认证文件\r\n\r\n#生成随机认证key\r\na=`head -c 16 /dev/urandom | od -An -t x | tr -d \' \' | head -c6`\r\nb=`head -c 16 /dev/urandom | od -An -t x | tr -d \' \' | head -c16`\r\n\r\ncat > bootstrap.secret.yaml <<EOF\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\n  name: bootstrap-token-$a\r\n  namespace: kube-system\r\ntype: bootstrap.kubernetes.io/token\r\nstringData:\r\n  description: "The default bootstrap token generated by \'kubelet \'."\r\n  token-id: $a\r\n  token-secret: $b\r\n  usage-bootstrap-authentication: "true"\r\n  usage-bootstrap-signing: "true"\r\n  auth-extra-groups:  system:bootstrappers:default-node-token,system:bootstrappers:worker,system:bootstrappers:ingress\r\n---\r\napiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\n  name: kubelet-bootstrap\r\nroleRef:\r\n  apiGroup: rbac.authorization.k8s.io\r\n  kind: ClusterRole\r\n  name: system:node-bootstrapper\r\nsubjects:\r\n- apiGroup: rbac.authorization.k8s.io\r\n  kind: Group\r\n  name: system:bootstrappers:default-node-token\r\n---\r\napiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\n  name: node-autoapprove-bootstrap\r\nroleRef:\r\n  apiGroup: rbac.authorization.k8s.io\r\n  kind: ClusterRole\r\n  name: system:certificates.k8s.io:certificatesigningrequests:nodeclient\r\nsubjects:\r\n- apiGroup: rbac.authorization.k8s.io\r\n  kind: Group\r\n  name: system:bootstrappers:default-node-token\r\n---\r\napiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\n  name: node-autoapprove-certificate-rotation\r\nroleRef:\r\n  apiGroup: rbac.authorization.k8s.io\r\n  kind: ClusterRole\r\n  name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient\r\nsubjects:\r\n- apiGroup: rbac.authorization.k8s.io\r\n  kind: Group\r\n  name: system:nodes\r\n---\r\napiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRole\r\nmetadata:\r\n  annotations:\r\n    rbac.authorization.kubernetes.io/autoupdate: "true"\r\n  labels:\r\n    kubernetes.io/bootstrapping: rbac-defaults\r\n  name: system:kube-apiserver-to-kubelet\r\nrules:\r\n  - apiGroups:\r\n      - ""\r\n    resources:\r\n      - nodes/proxy\r\n      - nodes/stats\r\n      - nodes/log\r\n      - nodes/spec\r\n      - nodes/metrics\r\n    verbs:\r\n      - "*"\r\n---\r\napiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\n  name: system:kube-apiserver\r\n  namespace: ""\r\nroleRef:\r\n  apiGroup: rbac.authorization.k8s.io\r\n  kind: ClusterRole\r\n  name: system:kube-apiserver-to-kubelet\r\nsubjects:\r\n  - apiGroup: rbac.authorization.k8s.io\r\n    kind: User\r\n    name: kube-apiserver\r\nEOF\r\n\r\nkubectl create -f bootstrap.secret.yaml\r\n\r\n#生成配置文件\r\nkubectl config set-cluster kubernetes  \\\r\n--certificate-authority=ca.pem   \\\r\n--embed-certs=true   \\\r\n--server=https://192.168.32.128:6443   \\\r\n--kubeconfig=bootstrap-kubelet.conf\r\n\r\nkubectl config set-credentials tls-bootstrap-token-user  \\\r\n--token=$a.$b \\\r\n--kubeconfig=bootstrap-kubelet.conf\r\n\r\nkubectl config set-context tls-bootstrap-token-user@kubernetes \\\r\n--cluster=kubernetes   \\\r\n--user=tls-bootstrap-token-user  \\\r\n--kubeconfig=bootstrap-kubelet.conf\r\n\r\nkubectl config use-context tls-bootstrap-token-user@kubernetes  \\\r\n--kubeconfig=bootstrap-kubelet.conf\r\n\r\n\r\n#生成service文件\r\ncat > /etc/systemd/system/kubelet.service <<EOF\r\n[Unit]\r\nDescription=Kubernetes Kubelet\r\nDocumentation=https://github.com/kubernetes/kubernetes\r\nAfter=containerd.service\r\nRequires=containerd.service\r\n\r\n[Service]\r\nExecStart=/usr/local/bin/kubelet\r\n\r\nRestart=always\r\nStartLimitInterval=0\r\nRestartSec=10\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n#生成service配置文件\r\n \r\nmkdir /etc/systemd/system/kubelet.service.d/ -p\r\ncat > /etc/systemd/system/kubelet.service.d/10-kubelet.conf <<EOF\r\n[Service]\r\nEnvironment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.kubeconfig"\r\nEnvironment="KUBELET_SYSTEM_ARGS=--hostname-override=node1"\r\nEnvironment="KUBELET_RINTIME=--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock"\r\nEnvironment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yml"\r\nEnvironment="KUBELET_EXTRA_ARGS=--node-labels=node.kubernetes.io/node=\'\'"\r\nExecStart=\r\nExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_SYSTEM_ARGS $KUBELET_EXTRA_ARGS $KUBELET_RINTIME\r\nEOF\r\n\r\n### 部署kubeproxy\r\n\r\n# 创建证书请求文件\r\n$ cat > kube-proxy-csr.json << EOF\r\n{\r\n  "CN": "system:kube-proxy",\r\n  "hosts": [],\r\n  "key": {\r\n    "algo": "rsa",\r\n    "size": 2048\r\n  },\r\n  "names": [\r\n    {\r\n      "C": "CN",\r\n      "L": "BeiJing",\r\n      "ST": "BeiJing",\r\n      "O": "k8s",\r\n      "OU": "System"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n\r\n# 生成证书\r\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy\r\n \r\n \r\nkubectl config set-cluster kubernetes \\\r\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\r\n  --embed-certs=true \\\r\n  --server=https://192.168.32.128:6443 \\\r\n  --kubeconfig=kube-proxy.kubeconfig\r\nkubectl config set-credentials kube-proxy \\\r\n  --client-certificate=./kube-proxy.pem \\\r\n  --client-key=./kube-proxy-key.pem \\\r\n  --embed-certs=true \\\r\n  --kubeconfig=kube-proxy.kubeconfig\r\nkubectl config set-context default \\\r\n  --cluster=kubernetes \\\r\n  --user=kube-proxy \\\r\n  --kubeconfig=kube-proxy.kubeconfig\r\nkubectl config use-context default --kubeconfig=kube-proxy.kubeconfig\r\n\r\n\r\n# 配置参数文件\r\ncat > /etc/kubernetes/cfg/kube-proxy-config.yml << EOF\r\nkind: KubeProxyConfiguration\r\napiVersion: kubeproxy.config.k8s.io/v1alpha1\r\nbindAddress: 0.0.0.0\r\nmetricsBindAddress: 0.0.0.0:10249\r\nclientConnection:\r\n  kubeconfig: /etc/kubernetes/kube-proxy.kubeconfig\r\nhostnameOverride: k8s-n1\r\nclusterCIDR: 172.17.0.0/16\r\nEOF\r\n\r\n# 创建配置文件\r\ncat > /etc/kubernetes/cfg/kube-proxy.conf << EOF\r\nKUBE_PROXY_OPTS="--logtostderr=false\r\n--v=2\r\n--config=/etc/kubernetes/cfg/kube-proxy-config.yml"\r\nEOF\r\n\r\n# systemd 管理 kube-proxy\r\ncat > /usr/lib/systemd/system/kube-proxy.service << EOF\r\n[Unit]\r\nDescription=Kubernetes Proxy\r\nAfter=network.target\r\n \r\n[Service]\r\nEnvironmentFile=/etc/kubernetes/cfg/kube-proxy.conf\r\nExecStart=/usr/local/bin/kube-proxy $KUBE_PROXY_OPTS\r\nRestart=on-failure\r\nLimitNOFILE=65536\r\n \r\n[Install]\r\nWantedBy=multi-user.target\r\nEOF\r\n\r\n### 部署网络组件\r\n\n'})}),"\n",(0,t.jsxs)(r.p,{children:["#下载客户端工具\r\nwget ",(0,t.jsx)(r.a,{href:"https://github.com/cilium/cilium-cli/releases/download/v0.10.3/cilium-linux-amd64.tar.gz",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/cilium/cilium-cli/releases/download/v0.10.3/cilium-linux-amd64.tar.gz"})]}),"\n",(0,t.jsx)(r.p,{children:"#解压\r\nsudo tar xf cilium-linux-amd64.tar.gz -C /usr/local/bin/"}),"\n",(0,t.jsx)(r.p,{children:"#安装下载镜像\r\nsudo ctr image pull registry.hub.docker.com/cilium/operator-generic:v1.11.1\r\nsudo ctr image pull registry.hub.docker.com/cilium/cilium:v1.11.1"}),"\n",(0,t.jsx)(r.p,{children:"#kubectl 可用"}),"\n",(0,t.jsx)(r.p,{children:"#使用命令安装\r\ncilium install --agent-image=registry.hub.docker.com/cilium/cilium:v1.11.1 --operator-image=registry.hub.docker.com/cilium/operator-generic:v1.11.1 --config=cluster-pool-ipv4-cidr=172.17.0.0/16"}),"\n",(0,t.jsx)(r.p,{children:"#for troubleshoot\r\nkubectl -n kube-system exec -ti cilium-jw546 -- cilium-health status"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\r\n### 安装kubernets-dashboard\r\n\r\nhttps://github.com/kubernetes/dashboard\r\n\n"})}),"\n",(0,t.jsxs)(r.p,{children:["kubectl apply -f ",(0,t.jsx)(r.a,{href:"https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml",target:"_blank",rel:"noopener noreferrer",children:"https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml"})]}),"\n",(0,t.jsx)(r.p,{children:"kubectl proxy"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/"})}),"\n",(0,t.jsx)(r.p,{children:"kubectl proxy --address='0.0.0.0' --port=8002 --accept-hosts='.*'"}),"\n",(0,t.jsx)(r.p,{children:"apiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\nname: admin-user\r\nnamespace: kubernetes-dashboard"}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.p,{children:"apiVersion: rbac.authorization.k8s.io/v1\r\nkind: ClusterRoleBinding\r\nmetadata:\r\nname: admin-user\r\nroleRef:\r\napiGroup: rbac.authorization.k8s.io\r\nkind: ClusterRole\r\nname: cluster-admin\r\nsubjects:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"kind: ServiceAccount\r\nname: admin-user\r\nnamespace: kubernetes-dashboard"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"kubectl apply -f k8s-dashboard.yaml"}),"\n",(0,t.jsx)(r.p,{children:"获取Bearer Token\r\nkubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\r\n### 安装 Hubble\r\n\r\n\r\ncilium hubble enable\r\n\r\n安装helm\r\n https://github.com/helm/helm\r\n https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz\r\n unzip and move it to /usr/local/bin/\r\n\r\ncilium hubble enable\r\n\r\n\x3c!-- 安装hubble\r\nhttps://github.com/cilium/hubble/releases/download/v0.9.0/hubble-linux-amd64.tar.gz\r\ntar -zxf hubble-linux-amd64.tar.gz && sudo mv hubble /usr/local/bin/\r\n --\x3e\r\n\r\n\r\ncilium hubble enable --ui\r\n\r\n# Open UI\r\ncilium hubble ui\r\n\r\nhttp://192.168.32.129:12000/\r\n\r\n#### Validate Hubble API Access\r\ncilium hubble port-forward\r\n\r\nhubble status\r\n\r\nhubble observe\r\n\r\n## 八、部署 CoreDNS\r\n\r\n## 九、高可用架构（扩容多 Master 架构）\r\n\r\n\r\nhttps://kubernetes.io/docs/setup/best-practices/certificates/\r\n\r\nhttps://cloudmessage.top/archives/2kubernetes%E5%AE%89%E8%A3%85md#%E4%BA%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE\r\n\r\nhttps://www.zhangzhuo.ltd/articles/2022/01/09/1641717241819.html\r\n\r\n\r\n\r\n\r\n## Windows install cilium\r\n\r\n### install containerd\r\n　wget https://github.com/containerd/containerd/releases/download/v1.6.0/cri-containerd-cni-1.6.0-windows-amd64.tar.gz\r\n\r\n### 生成containerd配置文件\r\n .\\containerd.exe config default | Out-File config.toml -Encoding ascii\r\n\r\n### 生成containerd配置文件\r\n\n"})}),"\n",(0,t.jsx)(r.p,{children:"　修改root和state目录"}),"\n",(0,t.jsx)(r.p,{children:'　　root = "C:\\Program Files\\containerd\\root"\r\n　　state = "C:\\Program Files\\containerd\\state"'}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,s.ah)(),e.components);return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["notes%2F01-Cloud%20Computing%2FK8s%2Finstall2.md"]={toc:[{text:"一、集群规划",id:"一集群规划",depth:2},{text:"二、初始化环境",id:"二初始化环境",depth:2},{text:"安装操作系统及配置IP",id:"安装操作系统及配置ip",depth:3},{text:"修改必要配置",id:"修改必要配置",depth:3},{text:"三、准备证书",id:"三准备证书",depth:2},{text:"准备工具",id:"准备工具",depth:3},{text:"生成证书",id:"生成证书",depth:3},{text:"五、安装 Docker",id:"五安装-docker",depth:2},{text:"安装cni插件",id:"安装cni插件",depth:3},{text:"安装runc",id:"安装runc",depth:3},{text:"安装containerd",id:"安装containerd",depth:3},{text:"六、部署 Master",id:"六部署-master",depth:2},{text:"kube-apiserver",id:"kube-apiserver",depth:3}],title:"配置参数",frontmatter:{}}}}]);