"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["2796"],{6989:function(n,e,r){r.r(e),r.d(e,{default:()=>o});var t=r("5893"),s=r("65");let a=r.p+"static/image/20190104122209305_9191.c1da0992.png",c=r.p+"static/image/20190104122150664_15856.1b17d102.png",i=r.p+"static/image/20190104122138793_30564.3d68af8f.png",p=r.p+"static/image/20190104122127105_14237.4eb7b474.png",l=r.p+"static/image/20190104122105452_32392.e5bdff0b.png",d=r.p+"static/image/20190104122040532_22168.57115bc2.png";function h(n){let e=Object.assign({h1:"h1",a:"a",p:"p",img:"img"},(0,s.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"dataplane",children:["dataplane",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#dataplane",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"2004年9月：三平面分离\r\n交换机的基本工作是处理不同接口上各种类型的数据，对于数据处理过程中各种具体的处理转发过程，例如L2/L3/ACL/QOS/组播/安全防护等各种网络功能的具体执行，都划分为交换机的数据平面；而控制平面用于控制各种网络协议的运行，例如控制OSPF、ARP、STP等等协议的正常运行，控制平面提供了对网络环境的准确认识，提供了数据平面数据处理转发前所必须的各种网络信息和转发查询表项；至于管理平面的功能是提供给网络管理人员使用TELNET、WEB、SSH、SNMP、RMON等方式管理设备的各种管理接口，并支持、理解和执行管理人员对于网络设备各种网络功能的设置命令。\r\n为什么需要对数据平面、控制平面和管理平面进行相互的分离呢？"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)("img",{src:d,alt:""})}),"\n",(0,t.jsx)(e.p,{children:"假设这几个平面不进行任何的分离，数据平面和控制、管理平面使用共用的主机资源，在大数据流量、复杂应用环境下数据平面由于承担着繁重的日常任务将可能消耗绝大部分资源，这对于整个交换机系统无疑是灾难性的，因为在某些极端的情况下，控制平面将没有充分的资源来保障运行，这就意味网络设备失去了对设备所处网络环境的真实了解，网络设备将立即陷于非正常工作状态甚至瘫痪状态，而管理人员也没有资源使用管理平面对网络设备的运行进行干预，所以数据平面需要严格地与控制平面、管理平面进行分离。\r\n管理平面所要求的系统资源是最低的，分离出一定的系统资源独立运行管理平面并不影响控制平面的运行，反而，是为了更好地保证控制平面的正常运行。因为，在网络环境频繁变动、网络协议剧烈动荡的情况下，控制平面所需要的资源将持续保持在一个极高的水平线，这其实说明了网络设备在该网络情况下是无法适应和正常运行的，管理平面的分离让系统管理员可以在控制平面出现异常状况的时候依然拥有足够资源顺利地打开设备的管理界面，通过改变或终止某个协议、端口的运行来阻止非正常网络环境对网络设备的剧烈影响，最终达到在线改变网络设备控制平面非正常运行的局面，因为控制平面的正常运行是至关重要的。\r\n通过采用数据平面、控制平面、管理平面相互分离的结构模型，保证了大量的数据处理不影响管理和控制，而在路由和环境复杂条件下，控制平面不影响管理平面，高度保证了系统安全稳定性。\r\n“三平面分离”技术注重于保护核心设备在病毒和攻击环境下依然提供正常的网络设备管理，满足在线地定位和解决安全问题，在稳定性设计上优于传统的“两平面分离”技术。"}),"\n",(0,t.jsxs)(e.p,{children:["2006年9月：CPP技术\r\n从交换机的体系结构来看，交换机有两部分组成：ASIC芯片用于高速的转发数据包，而CPU主要是来处理一些更为复杂的事务，包括对网络管理方面任务和请求进行处理；处理各种协议报文以及部分特殊的数据报文。\r\n常见对网络设备的病毒和攻击实际上就是让主机没有资源去应付这些正常的请求，把大量的资源都用在处理那些非法性质的请求和事务上，从而导致系统的不可用。\r\n",(0,t.jsx)("img",{src:l,alt:""})]}),"\n",(0,t.jsx)(e.p,{children:"随着交换机应用的逐渐普及，以及网络攻击的不断增多，越来越需要为数据交换机提供一种保护机制，对发往交换机CPU的数据流，进行流分类和优先级分级处理，以及CPU的带宽限速，以确保在任何情况下CPU都不会出现负载过高的状况，从而能为用户提供一个稳定的网络环境，这种保护机制就是CPU Protect Policy，简称CPP。"}),"\n",(0,t.jsxs)(e.p,{children:["来自 ",(0,t.jsx)(e.a,{href:"http://www.ruijie.com.cn/special/wzwn/11/content.html#4",target:"_blank",rel:"noopener noreferrer",children:"http://www.ruijie.com.cn/special/wzwn/11/content.html#4"})]}),"\n",(0,t.jsx)(e.p,{children:"1 交换机数据、控制、管理平面分离设计 1.1 交换机数据、控制、管理平面的概念"}),"\n",(0,t.jsx)(e.p,{children:"1.1.1 交换机数据平面 交换机的基本任务是处理和转发交换机各不同端口上各种类型的数据，对于数据处理过程中 各种具体的处理转发过程，例如 L2/L3/ACL/QOS/组播/安全防护等各功能的具体执行过程，都 属于交换机数据平面的任务范畴。 交换机的数据平面在交换机的各种平面任务当中需要占用决大部分的资源，也直接地对交换 机的性能表现起决定作用，各个厂家都通过各种技术手段和芯片技术努力地提高交换机数据 平面的处理性能。"}),"\n",(0,t.jsxs)(e.p,{children:["1.1.2 交换机控制平面 交换机的控制平面用于控制和管理所有网络协议的运行，例如生成树协议、VLAN 协议、ARP 协议、各种路由协议和组播协议等等的管理和控制。交换机控制平面通过网络协议提供给交 换机对整个网络环境中网络设备、连接链路和交互协议的准确了解，并在网络状况发生改变 时做出及时的调整以维护网络的正常运行。控制平面提供了数据平面数据处理转发前所必须 的各种网络信息和转发查询表项。 交换机的控制平面并不占用过多的主机资源，但在正常状况下依然是交换机 CPU 资源的主要 占用平面，因此除了优化交换机对于控制平面的调度流程和效率，一般还可以通过提供多 CPU 或提高 CPU 的处理性能来提高交换机的控制平面性能。\r\n",(0,t.jsx)("img",{src:p,alt:""}),"\r\n目前业界一般采用两平面分离的设计方式，“数据平面”是一个平面，“管理和控制平面”同 属于一个平面，合并统称为“控制平面”，可以看出，对于“数据平面”的分离已经达到了业 界高度的一致。 因为对于交换机而言，数据平面所耗费的主机资源是最多的，正常状况下，数据平面消耗的 是主机的硬件 ASIC 资源，但在大流量或某些病毒攻击网络环境下，在硬件 ASIC 资源无法满 足数据平面处理的情况下，数据平面的处理任务会进一步占用主机 CPU、内存等方面资源， 从而可能会耗尽主机的所有软硬件资源，不仅系统管理员无法对设备进行管理，而且交换机 的控制平面由于没有资源运行使得交换机成为一个“孤岛”，交换机无法及时准确地提供数据 平面处理转发前所必须的各种网络信息和转发查询表项，无法通过各种网络协议对网络上的 设备和链路的状态和异常情况进行了解，交换机失去了网络互联的意义。所以，数据平面的 单独分离是必不可少的。（其实，交换机在主机资源特别是 CPU 资源耗尽时已经处于瘫痪状态， 数据平面的处理任务也无法得以保障。） 那为何又要对交换机的管理平面和控制平面进行相互的分离呢？在网络设备正常运行的状态 下这两个平面是可以共存的，因为不论是控制平面或是管理平面都由于占用主机资源较少， 不存在主机资源（主要是 CPU）的争夺。 但在现实的使用中却大量地存在类似情况：在病毒攻击情况下或网络中某些设备或链路发生 状态震荡的状况下，由于各种二/三层协议必须跟随着网络的状态震荡进行相应的快速重计算\r\n和变更，这将耗费巨大的主机资源（主要是 CPU），交换机将随时进入瘫痪状态。系统管理员 发现网络运行不正常后希望登陆到网络设备，对网络设备的各种协议和状态进行查看，期望 找出问题，必要时对某些协议或物理端口进行重新设置或屏蔽以保障网络设备的正常运行， 但由于主机没有资源预留给管理平面，系统管理员的一切行为都无法实施，因此，发生了大 量系统管理员直接开关电源重新启动设备的无奈之举，不仅极大地影响了网络的持续稳定运 行，而且无法及时对网络的异常状况进行定位和分析。因此，进一步地对管理平面进行单独 分离的设计思路随之而出。 下图是管理平面和控制平面进一步分离的三平面分离设计示意图："]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)("img",{src:i,alt:""}),"\r\n从上图可以看到，管理平面和控制平面进行了分离，管理平面所要求的系统资源是最低的， 分离出一定的系统资源独立运行管理平面并不影响控制平面的运行资源，反而，是为了更好 地保证控制平面的正常运行。因为，在网络环境频繁变动、网络协议剧烈动荡的情况下，控 制平面所需要的资源将持续保持在一个极高的水平线，网络设备在该网络情况下已经无法适 应和正常运行，管理平面的分离让系统管理员可以在控制平面出现异常状况的时候依然拥有 足够资源顺利地打开设备的管理界面，拥有资源对网络设备的不正常现象进行查看和分析， 并可以通过改变或终止某个协议、端口的运行来阻止非正常网络环境对网络设备的剧烈影响， 最终达到在线改变网络设备控制平面非正常运行的局面，因为控制平面的正常运行是至关重 要的。 所以，交换机通过采用数据平面、控制平面、管理平面相互分离的设计方式，保证了最耗费 主机资源的数据处理转发任务不影响交换机的管理和协议运行，而在路由和环境复杂多变条 件下，控制平面的任务不影响交换机的管理，高度保证了交换机系统的稳定性。"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)("img",{src:c,alt:""}),"\r\n1.1.3 交换机管理平面 交换机的管理平面是提供给网络管理人员使用 TELNET、WEB、SSH、SNMP、RMON 等方式来管理设备，并支持、理解和执行管理人员对于网络设备各种网络协议的设置命令。管理 平面提供了控制平面正常运行的前提，管理平面必须预先设置好控制平面中各种协议的相关 参数，并支持在必要时刻对控制平面的运行进行干预。\r\n交换机的管理平面所需的交换机资源最少，目前都通过交换机 CPU 实现。 1.2 为什么需要对数据、控制和管理平面进行相互的分离？ 首先，从业界流行的平面设计方式进行分析可以得到一些初步的结论，下图是目前业界绝大 部分网络设备采用的设计方式："]}),"\n",(0,t.jsxs)(e.p,{children:["2 锐捷网络高端产品的三平面分离设计\r\n锐捷万兆核心路由交换机 RG-S6800E 和面向十万兆平台设计的 RG-S8600、RG-S9600 通过进 一步优化 NP+ASIC 的设计体系形成了数据平面、控制平面和管理平面的相互分离，如下\r\n示意 图：\r\n",(0,t.jsx)("img",{src:a,alt:""}),"\r\n图2-1 近几年的芯片技术发展已经支持ASIC芯片独立实现L2/L3/ACL/QOS/组播等数据平面的功能， 抛弃了数据流第一个数据包需要 CPU 干预的传统工作机制。如图所示，在交换机的结构模型 里，每个线卡都拥有独立的 ASIC 芯片，可以独立地运行数据平面的各种工作，当数据在不同 线卡之间转发时管理模块的 ASIC 芯片发挥作用，因此交换机的 ASIC 芯片负责着交换机数据 平面的工作。而多业务卡由于使用 NP 技术拥有若干个微码处理器（CPU），性能强大，所以 RG-S6800E、RG-S8600、RG-S9600 可以把控制平面的任务交由多业务卡来实现，这样，管理 模块的 CPU 摆脱了同时负责控制平面和管理平面任务的传统做法，而仅仅独立负责管理平面 的工作，从而达到了数据平面、控制平面、管理平面相互分离的结构模型。 锐捷万兆核心路由交换机 RG-S6800E 和面向\r\n十万兆平台设计的 RG-S8600、RG-S9600 通过采 用数据平面、控制平面、管理平面相互分离的结构模型高度保证了系统稳定性。"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"http://www.ruijie.com.cn/special/wzwn/download/pdf/s.pdf",target:"_blank",rel:"noopener noreferrer",children:"http://www.ruijie.com.cn/special/wzwn/download/pdf/s.pdf"})})]})}function S(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}let o=S;S.__RSPRESS_PAGE_META={},S.__RSPRESS_PAGE_META["notes%2F05-Networking%20%26%20Security%2Frouter%2Fdataplane.md"]={toc:[],title:"dataplane",frontmatter:{}}}}]);